# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NodeProto(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeProto()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeProto(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeProto
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeProto
    def Input(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NodeProto
    def InputLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeProto
    def InputIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # NodeProto
    def Output(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NodeProto
    def OutputLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeProto
    def OutputIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # NodeProto
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeProto
    def OpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeProto
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeProto
    def Attribute(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnxfbs.protos.AttributeProto import AttributeProto
            obj = AttributeProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeProto
    def AttributeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeProto
    def AttributeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # NodeProto
    def DocString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def NodeProtoStart(builder):
    builder.StartObject(7)

def Start(builder):
    NodeProtoStart(builder)

def NodeProtoAddInput(builder, input):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(input), 0)

def AddInput(builder, input):
    NodeProtoAddInput(builder, input)

def NodeProtoStartInputVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInputVector(builder, numElems: int) -> int:
    return NodeProtoStartInputVector(builder, numElems)

def NodeProtoAddOutput(builder, output):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(output), 0)

def AddOutput(builder, output):
    NodeProtoAddOutput(builder, output)

def NodeProtoStartOutputVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOutputVector(builder, numElems: int) -> int:
    return NodeProtoStartOutputVector(builder, numElems)

def NodeProtoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    NodeProtoAddName(builder, name)

def NodeProtoAddOpType(builder, opType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(opType), 0)

def AddOpType(builder, opType):
    NodeProtoAddOpType(builder, opType)

def NodeProtoAddDomain(builder, domain):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(domain), 0)

def AddDomain(builder, domain):
    NodeProtoAddDomain(builder, domain)

def NodeProtoAddAttribute(builder, attribute):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(attribute), 0)

def AddAttribute(builder, attribute):
    NodeProtoAddAttribute(builder, attribute)

def NodeProtoStartAttributeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAttributeVector(builder, numElems: int) -> int:
    return NodeProtoStartAttributeVector(builder, numElems)

def NodeProtoAddDocString(builder, docString):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(docString), 0)

def AddDocString(builder, docString):
    NodeProtoAddDocString(builder, docString)

def NodeProtoEnd(builder):
    return builder.EndObject()

def End(builder):
    return NodeProtoEnd(builder)

import onnxfbs.protos.AttributeProto
try:
    from typing import List
except:
    pass

class NodeProtoT(object):

    # NodeProtoT
    def __init__(self):
        self.input = None  # type: List[str]
        self.output = None  # type: List[str]
        self.name = None  # type: str
        self.opType = None  # type: str
        self.domain = None  # type: str
        self.attribute = None  # type: List[onnx.AttributeProto.AttributeProtoT]
        self.docString = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        nodeProto = NodeProto()
        nodeProto.Init(buf, pos)
        return cls.InitFromObj(nodeProto)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, nodeProto):
        x = NodeProtoT()
        x._UnPack(nodeProto)
        return x

    # NodeProtoT
    def _UnPack(self, nodeProto):
        if nodeProto is None:
            return
        if not nodeProto.InputIsNone():
            self.input = []
            for i in range(nodeProto.InputLength()):
                self.input.append(nodeProto.Input(i))
        if not nodeProto.OutputIsNone():
            self.output = []
            for i in range(nodeProto.OutputLength()):
                self.output.append(nodeProto.Output(i))
        self.name = nodeProto.Name()
        self.opType = nodeProto.OpType()
        self.domain = nodeProto.Domain()
        if not nodeProto.AttributeIsNone():
            self.attribute = []
            for i in range(nodeProto.AttributeLength()):
                if nodeProto.Attribute(i) is None:
                    self.attribute.append(None)
                else:
                    attributeProto_ = onnx.AttributeProto.AttributeProtoT.InitFromObj(nodeProto.Attribute(i))
                    self.attribute.append(attributeProto_)
        self.docString = nodeProto.DocString()

    # NodeProtoT
    def Pack(self, builder):
        if self.input is not None:
            inputlist = []
            for i in range(len(self.input)):
                inputlist.append(builder.CreateString(self.input[i]))
            NodeProtoStartInputVector(builder, len(self.input))
            for i in reversed(range(len(self.input))):
                builder.PrependUOffsetTRelative(inputlist[i])
            input = builder.EndVector()
        if self.output is not None:
            outputlist = []
            for i in range(len(self.output)):
                outputlist.append(builder.CreateString(self.output[i]))
            NodeProtoStartOutputVector(builder, len(self.output))
            for i in reversed(range(len(self.output))):
                builder.PrependUOffsetTRelative(outputlist[i])
            output = builder.EndVector()
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.opType is not None:
            opType = builder.CreateString(self.opType)
        if self.domain is not None:
            domain = builder.CreateString(self.domain)
        if self.attribute is not None:
            attributelist = []
            for i in range(len(self.attribute)):
                attributelist.append(self.attribute[i].Pack(builder))
            NodeProtoStartAttributeVector(builder, len(self.attribute))
            for i in reversed(range(len(self.attribute))):
                builder.PrependUOffsetTRelative(attributelist[i])
            attribute = builder.EndVector()
        if self.docString is not None:
            docString = builder.CreateString(self.docString)
        NodeProtoStart(builder)
        if self.input is not None:
            NodeProtoAddInput(builder, input)
        if self.output is not None:
            NodeProtoAddOutput(builder, output)
        if self.name is not None:
            NodeProtoAddName(builder, name)
        if self.opType is not None:
            NodeProtoAddOpType(builder, opType)
        if self.domain is not None:
            NodeProtoAddDomain(builder, domain)
        if self.attribute is not None:
            NodeProtoAddAttribute(builder, attribute)
        if self.docString is not None:
            NodeProtoAddDocString(builder, docString)
        nodeProto = NodeProtoEnd(builder)
        return nodeProto
