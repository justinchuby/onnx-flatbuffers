# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SparseTensorProto(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SparseTensorProto()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSparseTensorProto(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SparseTensorProto
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SparseTensorProto
    def Values(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.TensorProto import TensorProto
            obj = TensorProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SparseTensorProto
    def Indices(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.TensorProto import TensorProto
            obj = TensorProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SparseTensorProto
    def Dims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SparseTensorProto
    def DimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # SparseTensorProto
    def DimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SparseTensorProto
    def DimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def SparseTensorProtoStart(builder):
    builder.StartObject(3)

def Start(builder):
    SparseTensorProtoStart(builder)

def SparseTensorProtoAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    SparseTensorProtoAddValues(builder, values)

def SparseTensorProtoAddIndices(builder, indices):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)

def AddIndices(builder, indices):
    SparseTensorProtoAddIndices(builder, indices)

def SparseTensorProtoAddDims(builder, dims):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dims), 0)

def AddDims(builder, dims):
    SparseTensorProtoAddDims(builder, dims)

def SparseTensorProtoStartDimsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartDimsVector(builder, numElems: int) -> int:
    return SparseTensorProtoStartDimsVector(builder, numElems)

def SparseTensorProtoEnd(builder):
    return builder.EndObject()

def End(builder):
    return SparseTensorProtoEnd(builder)

import onnxfbs.protos.TensorProto
try:
    from typing import List, Optional
except:
    pass

class SparseTensorProtoT(object):

    # SparseTensorProtoT
    def __init__(self):
        self.values = None  # type: Optional[onnx.TensorProto.TensorProtoT]
        self.indices = None  # type: Optional[onnx.TensorProto.TensorProtoT]
        self.dims = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sparseTensorProto = SparseTensorProto()
        sparseTensorProto.Init(buf, pos)
        return cls.InitFromObj(sparseTensorProto)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sparseTensorProto):
        x = SparseTensorProtoT()
        x._UnPack(sparseTensorProto)
        return x

    # SparseTensorProtoT
    def _UnPack(self, sparseTensorProto):
        if sparseTensorProto is None:
            return
        if sparseTensorProto.Values() is not None:
            self.values = onnx.TensorProto.TensorProtoT.InitFromObj(sparseTensorProto.Values())
        if sparseTensorProto.Indices() is not None:
            self.indices = onnx.TensorProto.TensorProtoT.InitFromObj(sparseTensorProto.Indices())
        if not sparseTensorProto.DimsIsNone():
            if np is None:
                self.dims = []
                for i in range(sparseTensorProto.DimsLength()):
                    self.dims.append(sparseTensorProto.Dims(i))
            else:
                self.dims = sparseTensorProto.DimsAsNumpy()

    # SparseTensorProtoT
    def Pack(self, builder):
        if self.values is not None:
            values = self.values.Pack(builder)
        if self.indices is not None:
            indices = self.indices.Pack(builder)
        if self.dims is not None:
            if np is not None and type(self.dims) is np.ndarray:
                dims = builder.CreateNumpyVector(self.dims)
            else:
                SparseTensorProtoStartDimsVector(builder, len(self.dims))
                for i in reversed(range(len(self.dims))):
                    builder.PrependInt64(self.dims[i])
                dims = builder.EndVector()
        SparseTensorProtoStart(builder)
        if self.values is not None:
            SparseTensorProtoAddValues(builder, values)
        if self.indices is not None:
            SparseTensorProtoAddIndices(builder, indices)
        if self.dims is not None:
            SparseTensorProtoAddDims(builder, dims)
        sparseTensorProto = SparseTensorProtoEnd(builder)
        return sparseTensorProto
