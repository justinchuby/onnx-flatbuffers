# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TypeProto_

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Anonymous1(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Anonymous1()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAnonymous1(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Anonymous1
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Anonymous1
    def TensorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.TypeProto_.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous1
    def SequenceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.TypeProto_.Sequence import Sequence
            obj = Sequence()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous1
    def MapType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.TypeProto_.Map import Map
            obj = Map()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous1
    def OptionalType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.TypeProto_.Optional import Optional
            obj = Optional()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous1
    def SparseTensorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.TypeProto_.SparseTensor import SparseTensor
            obj = SparseTensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Anonymous1Start(builder):
    builder.StartObject(5)

def Start(builder):
    Anonymous1Start(builder)

def Anonymous1AddTensorType(builder, tensorType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tensorType), 0)

def AddTensorType(builder, tensorType):
    Anonymous1AddTensorType(builder, tensorType)

def Anonymous1AddSequenceType(builder, sequenceType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sequenceType), 0)

def AddSequenceType(builder, sequenceType):
    Anonymous1AddSequenceType(builder, sequenceType)

def Anonymous1AddMapType(builder, mapType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mapType), 0)

def AddMapType(builder, mapType):
    Anonymous1AddMapType(builder, mapType)

def Anonymous1AddOptionalType(builder, optionalType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(optionalType), 0)

def AddOptionalType(builder, optionalType):
    Anonymous1AddOptionalType(builder, optionalType)

def Anonymous1AddSparseTensorType(builder, sparseTensorType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(sparseTensorType), 0)

def AddSparseTensorType(builder, sparseTensorType):
    Anonymous1AddSparseTensorType(builder, sparseTensorType)

def Anonymous1End(builder):
    return builder.EndObject()

def End(builder):
    return Anonymous1End(builder)

import onnxfbs.protos.TypeProto_.Map
import onnxfbs.protos.TypeProto_.Optional
import onnxfbs.protos.TypeProto_.Sequence
import onnxfbs.protos.TypeProto_.SparseTensor
import onnxfbs.protos.TypeProto_.Tensor
try:
    from typing import Optional
except:
    pass

class Anonymous1T(object):

    # Anonymous1T
    def __init__(self):
        self.tensorType = None  # type: Optional[onnx.TypeProto_.Tensor.TensorT]
        self.sequenceType = None  # type: Optional[onnx.TypeProto_.Sequence.SequenceT]
        self.mapType = None  # type: Optional[onnx.TypeProto_.Map.MapT]
        self.optionalType = None  # type: Optional[onnx.TypeProto_.Optional.OptionalT]
        self.sparseTensorType = None  # type: Optional[onnx.TypeProto_.SparseTensor.SparseTensorT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        anonymous1 = Anonymous1()
        anonymous1.Init(buf, pos)
        return cls.InitFromObj(anonymous1)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, anonymous1):
        x = Anonymous1T()
        x._UnPack(anonymous1)
        return x

    # Anonymous1T
    def _UnPack(self, anonymous1):
        if anonymous1 is None:
            return
        if anonymous1.TensorType() is not None:
            self.tensorType = onnx.TypeProto_.Tensor.TensorT.InitFromObj(anonymous1.TensorType())
        if anonymous1.SequenceType() is not None:
            self.sequenceType = onnx.TypeProto_.Sequence.SequenceT.InitFromObj(anonymous1.SequenceType())
        if anonymous1.MapType() is not None:
            self.mapType = onnx.TypeProto_.Map.MapT.InitFromObj(anonymous1.MapType())
        if anonymous1.OptionalType() is not None:
            self.optionalType = onnx.TypeProto_.Optional.OptionalT.InitFromObj(anonymous1.OptionalType())
        if anonymous1.SparseTensorType() is not None:
            self.sparseTensorType = onnx.TypeProto_.SparseTensor.SparseTensorT.InitFromObj(anonymous1.SparseTensorType())

    # Anonymous1T
    def Pack(self, builder):
        if self.tensorType is not None:
            tensorType = self.tensorType.Pack(builder)
        if self.sequenceType is not None:
            sequenceType = self.sequenceType.Pack(builder)
        if self.mapType is not None:
            mapType = self.mapType.Pack(builder)
        if self.optionalType is not None:
            optionalType = self.optionalType.Pack(builder)
        if self.sparseTensorType is not None:
            sparseTensorType = self.sparseTensorType.Pack(builder)
        Anonymous1Start(builder)
        if self.tensorType is not None:
            Anonymous1AddTensorType(builder, tensorType)
        if self.sequenceType is not None:
            Anonymous1AddSequenceType(builder, sequenceType)
        if self.mapType is not None:
            Anonymous1AddMapType(builder, mapType)
        if self.optionalType is not None:
            Anonymous1AddOptionalType(builder, optionalType)
        if self.sparseTensorType is not None:
            Anonymous1AddSparseTensorType(builder, sparseTensorType)
        anonymous1 = Anonymous1End(builder)
        return anonymous1
