# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TrainingInfoProto(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrainingInfoProto()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrainingInfoProto(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TrainingInfoProto
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrainingInfoProto
    def Initialization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.GraphProto import GraphProto
            obj = GraphProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfoProto
    def Algorithm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.GraphProto import GraphProto
            obj = GraphProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfoProto
    def InitializationBinding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnxfbs.protos.StringStringEntryProto import StringStringEntryProto
            obj = StringStringEntryProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfoProto
    def InitializationBindingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrainingInfoProto
    def InitializationBindingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TrainingInfoProto
    def UpdateBinding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnxfbs.protos.StringStringEntryProto import StringStringEntryProto
            obj = StringStringEntryProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfoProto
    def UpdateBindingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrainingInfoProto
    def UpdateBindingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def TrainingInfoProtoStart(builder):
    builder.StartObject(4)

def Start(builder):
    TrainingInfoProtoStart(builder)

def TrainingInfoProtoAddInitialization(builder, initialization):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(initialization), 0)

def AddInitialization(builder, initialization):
    TrainingInfoProtoAddInitialization(builder, initialization)

def TrainingInfoProtoAddAlgorithm(builder, algorithm):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(algorithm), 0)

def AddAlgorithm(builder, algorithm):
    TrainingInfoProtoAddAlgorithm(builder, algorithm)

def TrainingInfoProtoAddInitializationBinding(builder, initializationBinding):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(initializationBinding), 0)

def AddInitializationBinding(builder, initializationBinding):
    TrainingInfoProtoAddInitializationBinding(builder, initializationBinding)

def TrainingInfoProtoStartInitializationBindingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInitializationBindingVector(builder, numElems: int) -> int:
    return TrainingInfoProtoStartInitializationBindingVector(builder, numElems)

def TrainingInfoProtoAddUpdateBinding(builder, updateBinding):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(updateBinding), 0)

def AddUpdateBinding(builder, updateBinding):
    TrainingInfoProtoAddUpdateBinding(builder, updateBinding)

def TrainingInfoProtoStartUpdateBindingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUpdateBindingVector(builder, numElems: int) -> int:
    return TrainingInfoProtoStartUpdateBindingVector(builder, numElems)

def TrainingInfoProtoEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrainingInfoProtoEnd(builder)

import onnx.GraphProto
import onnx.StringStringEntryProto
try:
    from typing import List, Optional
except:
    pass

class TrainingInfoProtoT(object):

    # TrainingInfoProtoT
    def __init__(self):
        self.initialization = None  # type: Optional[onnx.GraphProto.GraphProtoT]
        self.algorithm = None  # type: Optional[onnx.GraphProto.GraphProtoT]
        self.initializationBinding = None  # type: List[onnx.StringStringEntryProto.StringStringEntryProtoT]
        self.updateBinding = None  # type: List[onnx.StringStringEntryProto.StringStringEntryProtoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        trainingInfoProto = TrainingInfoProto()
        trainingInfoProto.Init(buf, pos)
        return cls.InitFromObj(trainingInfoProto)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, trainingInfoProto):
        x = TrainingInfoProtoT()
        x._UnPack(trainingInfoProto)
        return x

    # TrainingInfoProtoT
    def _UnPack(self, trainingInfoProto):
        if trainingInfoProto is None:
            return
        if trainingInfoProto.Initialization() is not None:
            self.initialization = onnx.GraphProto.GraphProtoT.InitFromObj(trainingInfoProto.Initialization())
        if trainingInfoProto.Algorithm() is not None:
            self.algorithm = onnx.GraphProto.GraphProtoT.InitFromObj(trainingInfoProto.Algorithm())
        if not trainingInfoProto.InitializationBindingIsNone():
            self.initializationBinding = []
            for i in range(trainingInfoProto.InitializationBindingLength()):
                if trainingInfoProto.InitializationBinding(i) is None:
                    self.initializationBinding.append(None)
                else:
                    stringStringEntryProto_ = onnx.StringStringEntryProto.StringStringEntryProtoT.InitFromObj(trainingInfoProto.InitializationBinding(i))
                    self.initializationBinding.append(stringStringEntryProto_)
        if not trainingInfoProto.UpdateBindingIsNone():
            self.updateBinding = []
            for i in range(trainingInfoProto.UpdateBindingLength()):
                if trainingInfoProto.UpdateBinding(i) is None:
                    self.updateBinding.append(None)
                else:
                    stringStringEntryProto_ = onnx.StringStringEntryProto.StringStringEntryProtoT.InitFromObj(trainingInfoProto.UpdateBinding(i))
                    self.updateBinding.append(stringStringEntryProto_)

    # TrainingInfoProtoT
    def Pack(self, builder):
        if self.initialization is not None:
            initialization = self.initialization.Pack(builder)
        if self.algorithm is not None:
            algorithm = self.algorithm.Pack(builder)
        if self.initializationBinding is not None:
            initializationBindinglist = []
            for i in range(len(self.initializationBinding)):
                initializationBindinglist.append(self.initializationBinding[i].Pack(builder))
            TrainingInfoProtoStartInitializationBindingVector(builder, len(self.initializationBinding))
            for i in reversed(range(len(self.initializationBinding))):
                builder.PrependUOffsetTRelative(initializationBindinglist[i])
            initializationBinding = builder.EndVector()
        if self.updateBinding is not None:
            updateBindinglist = []
            for i in range(len(self.updateBinding)):
                updateBindinglist.append(self.updateBinding[i].Pack(builder))
            TrainingInfoProtoStartUpdateBindingVector(builder, len(self.updateBinding))
            for i in reversed(range(len(self.updateBinding))):
                builder.PrependUOffsetTRelative(updateBindinglist[i])
            updateBinding = builder.EndVector()
        TrainingInfoProtoStart(builder)
        if self.initialization is not None:
            TrainingInfoProtoAddInitialization(builder, initialization)
        if self.algorithm is not None:
            TrainingInfoProtoAddAlgorithm(builder, algorithm)
        if self.initializationBinding is not None:
            TrainingInfoProtoAddInitializationBinding(builder, initializationBinding)
        if self.updateBinding is not None:
            TrainingInfoProtoAddUpdateBinding(builder, updateBinding)
        trainingInfoProto = TrainingInfoProtoEnd(builder)
        return trainingInfoProto
