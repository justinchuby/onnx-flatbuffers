# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypeProto(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypeProto()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTypeProto(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TypeProto
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypeProto
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnxfbs.protos.TypeProto_.Anonymous1 import Anonymous1
            obj = Anonymous1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TypeProto
    def Denotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TypeProtoStart(builder):
    builder.StartObject(2)

def Start(builder):
    TypeProtoStart(builder)

def TypeProtoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    TypeProtoAddValue(builder, value)

def TypeProtoAddDenotation(builder, denotation):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(denotation), 0)

def AddDenotation(builder, denotation):
    TypeProtoAddDenotation(builder, denotation)

def TypeProtoEnd(builder):
    return builder.EndObject()

def End(builder):
    return TypeProtoEnd(builder)

import onnx.TypeProto_.Anonymous1
try:
    from typing import Optional
except:
    pass

class TypeProtoT(object):

    # TypeProtoT
    def __init__(self):
        self.value = None  # type: Optional[onnx.TypeProto_.Anonymous1.Anonymous1T]
        self.denotation = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typeProto = TypeProto()
        typeProto.Init(buf, pos)
        return cls.InitFromObj(typeProto)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, typeProto):
        x = TypeProtoT()
        x._UnPack(typeProto)
        return x

    # TypeProtoT
    def _UnPack(self, typeProto):
        if typeProto is None:
            return
        if typeProto.Value() is not None:
            self.value = onnx.TypeProto_.Anonymous1.Anonymous1T.InitFromObj(typeProto.Value())
        self.denotation = typeProto.Denotation()

    # TypeProtoT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        if self.denotation is not None:
            denotation = builder.CreateString(self.denotation)
        TypeProtoStart(builder)
        if self.value is not None:
            TypeProtoAddValue(builder, value)
        if self.denotation is not None:
            TypeProtoAddDenotation(builder, denotation)
        typeProto = TypeProtoEnd(builder)
        return typeProto
