from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from flatbuffers import table

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class Version(object):
  _START_VERSION: int
  IR_VERSION_2017_10_10: int
  IR_VERSION_2017_10_30: int
  IR_VERSION_2017_11_3: int
  IR_VERSION_2019_1_22: int
  IR_VERSION_2019_3_18: int
  IR_VERSION_2019_9_19: int
  IR_VERSION_2020_5_8: int
  IR_VERSION_2021_7_30: int
  IR_VERSION_2023_5_5: int
  IR_VERSION_2024_3_25: int
  IR_VERSION_2025_05_12: int
  IR_VERSION: int
class AttributeType(object):
  UNDEFINED: int
  FLOAT: int
  INT: int
  STRING: int
  TENSOR: int
  GRAPH: int
  FLOATS: int
  INTS: int
  STRINGS: int
  TENSORS: int
  GRAPHS: int
  SPARSE_TENSOR: int
  SPARSE_TENSORS: int
  TYPE_PROTO: int
  TYPE_PROTOS: int
class DataType(object):
  UNDEFINED: int
  FLOAT: int
  UINT8: int
  INT8: int
  UINT16: int
  INT16: int
  INT32: int
  INT64: int
  STRING: int
  BOOL: int
  FLOAT16: int
  DOUBLE: int
  UINT32: int
  UINT64: int
  COMPLEX64: int
  COMPLEX128: int
  BFLOAT16: int
  FLOAT8E4M3FN: int
  FLOAT8E4M3FNUZ: int
  FLOAT8E5M2: int
  FLOAT8E5M2FNUZ: int
  UINT4: int
  INT4: int
  FLOAT4E2M1: int
  FLOAT8E8M0: int
class TensorDataLocation(object):
  DEFAULT: int
  EXTERNAL: int
class OperatorStatus(object):
  EXPERIMENTAL: int
  STABLE: int
class DimensionValueType(object):
  UNKNOWN: int
  VALUE: int
  PARAM: int
class ValueType(object):
  NONE: int
  tensor_type: int
  sequence_type: int
  map_type: int
  optional_type: int
  sparse_tensor_type: int
class Attribute(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Attribute: ...
  @classmethod
  def GetRootAsAttribute(cls, buf: bytes, offset: int) -> Attribute: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def RefAttrName(self) -> str | None: ...
  def DocString(self) -> str | None: ...
  def Type(self) -> typing.Literal[AttributeType.UNDEFINED, AttributeType.FLOAT, AttributeType.INT, AttributeType.STRING, AttributeType.TENSOR, AttributeType.GRAPH, AttributeType.FLOATS, AttributeType.INTS, AttributeType.STRINGS, AttributeType.TENSORS, AttributeType.GRAPHS, AttributeType.SPARSE_TENSOR, AttributeType.SPARSE_TENSORS, AttributeType.TYPE_PROTO, AttributeType.TYPE_PROTOS]: ...
  def F(self) -> float: ...
  def I(self) -> int: ...
  def S(self) -> str | None: ...
  def T(self) -> Tensor | None: ...
  def G(self) -> Graph | None: ...
  def SparseTensor(self) -> SparseTensor | None: ...
  def Tp(self) -> TypeInfo | None: ...
  def Floats(self, i: int) -> typing.List[float]: ...
  def FloatsAsNumpy(self) -> np.ndarray: ...
  def FloatsLength(self) -> int: ...
  def FloatsIsNone(self) -> bool: ...
  def Ints(self, i: int) -> typing.List[int]: ...
  def IntsAsNumpy(self) -> np.ndarray: ...
  def IntsLength(self) -> int: ...
  def IntsIsNone(self) -> bool: ...
  def Strings(self, i: int) -> str: ...
  def StringsLength(self) -> int: ...
  def StringsIsNone(self) -> bool: ...
  def Tensors(self, i: int) -> Tensor | None: ...
  def TensorsLength(self) -> int: ...
  def TensorsIsNone(self) -> bool: ...
  def Graphs(self, i: int) -> Graph | None: ...
  def GraphsLength(self) -> int: ...
  def GraphsIsNone(self) -> bool: ...
  def SparseTensors(self, i: int) -> SparseTensor | None: ...
  def SparseTensorsLength(self) -> int: ...
  def SparseTensorsIsNone(self) -> bool: ...
  def Types(self, i: int) -> TypeInfo | None: ...
  def TypesLength(self) -> int: ...
  def TypesIsNone(self) -> bool: ...
def AttributeStart(builder: flatbuffers.Builder) -> None: ...
def AttributeAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def AttributeAddRefAttrName(builder: flatbuffers.Builder, refAttrName: uoffset) -> None: ...
def AttributeAddDocString(builder: flatbuffers.Builder, docString: uoffset) -> None: ...
def AttributeAddType(builder: flatbuffers.Builder, type: typing.Literal[AttributeType.UNDEFINED, AttributeType.FLOAT, AttributeType.INT, AttributeType.STRING, AttributeType.TENSOR, AttributeType.GRAPH, AttributeType.FLOATS, AttributeType.INTS, AttributeType.STRINGS, AttributeType.TENSORS, AttributeType.GRAPHS, AttributeType.SPARSE_TENSOR, AttributeType.SPARSE_TENSORS, AttributeType.TYPE_PROTO, AttributeType.TYPE_PROTOS]) -> None: ...
def AttributeAddF(builder: flatbuffers.Builder, f: float) -> None: ...
def AttributeAddI(builder: flatbuffers.Builder, i: int) -> None: ...
def AttributeAddS(builder: flatbuffers.Builder, s: uoffset) -> None: ...
def AttributeAddT(builder: flatbuffers.Builder, t: uoffset) -> None: ...
def AttributeAddG(builder: flatbuffers.Builder, g: uoffset) -> None: ...
def AttributeAddSparseTensor(builder: flatbuffers.Builder, sparseTensor: uoffset) -> None: ...
def AttributeAddTp(builder: flatbuffers.Builder, tp: uoffset) -> None: ...
def AttributeAddFloats(builder: flatbuffers.Builder, floats: uoffset) -> None: ...
def AttributeStartFloatsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AttributeAddInts(builder: flatbuffers.Builder, ints: uoffset) -> None: ...
def AttributeStartIntsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AttributeAddStrings(builder: flatbuffers.Builder, strings: uoffset) -> None: ...
def AttributeStartStringsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AttributeAddTensors(builder: flatbuffers.Builder, tensors: uoffset) -> None: ...
def AttributeStartTensorsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AttributeAddGraphs(builder: flatbuffers.Builder, graphs: uoffset) -> None: ...
def AttributeStartGraphsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AttributeAddSparseTensors(builder: flatbuffers.Builder, sparseTensors: uoffset) -> None: ...
def AttributeStartSparseTensorsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AttributeAddTypes(builder: flatbuffers.Builder, types: uoffset) -> None: ...
def AttributeStartTypesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def AttributeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class IntIntListEntry(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> IntIntListEntry: ...
  @classmethod
  def GetRootAsIntIntListEntry(cls, buf: bytes, offset: int) -> IntIntListEntry: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Key(self) -> int: ...
  def Value(self, i: int) -> typing.List[int]: ...
  def ValueAsNumpy(self) -> np.ndarray: ...
  def ValueLength(self) -> int: ...
  def ValueIsNone(self) -> bool: ...
def IntIntListEntryStart(builder: flatbuffers.Builder) -> None: ...
def IntIntListEntryAddKey(builder: flatbuffers.Builder, key: int) -> None: ...
def IntIntListEntryAddValue(builder: flatbuffers.Builder, value: uoffset) -> None: ...
def IntIntListEntryStartValueVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def IntIntListEntryEnd(builder: flatbuffers.Builder) -> uoffset: ...
class NodeDeviceConfiguration(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> NodeDeviceConfiguration: ...
  @classmethod
  def GetRootAsNodeDeviceConfiguration(cls, buf: bytes, offset: int) -> NodeDeviceConfiguration: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def ConfigurationId(self) -> str | None: ...
  def ShardingSpec(self, i: int) -> ShardingSpec | None: ...
  def ShardingSpecLength(self) -> int: ...
  def ShardingSpecIsNone(self) -> bool: ...
  def PipelineStage(self) -> int: ...
def NodeDeviceConfigurationStart(builder: flatbuffers.Builder) -> None: ...
def NodeDeviceConfigurationAddConfigurationId(builder: flatbuffers.Builder, configurationId: uoffset) -> None: ...
def NodeDeviceConfigurationAddShardingSpec(builder: flatbuffers.Builder, shardingSpec: uoffset) -> None: ...
def NodeDeviceConfigurationStartShardingSpecVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def NodeDeviceConfigurationAddPipelineStage(builder: flatbuffers.Builder, pipelineStage: int) -> None: ...
def NodeDeviceConfigurationEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ShardingSpec(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ShardingSpec: ...
  @classmethod
  def GetRootAsShardingSpec(cls, buf: bytes, offset: int) -> ShardingSpec: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def TensorName(self) -> str | None: ...
  def Device(self, i: int) -> typing.List[int]: ...
  def DeviceAsNumpy(self) -> np.ndarray: ...
  def DeviceLength(self) -> int: ...
  def DeviceIsNone(self) -> bool: ...
  def IndexToDeviceGroupMap(self, i: int) -> IntIntListEntry | None: ...
  def IndexToDeviceGroupMapLength(self) -> int: ...
  def IndexToDeviceGroupMapIsNone(self) -> bool: ...
  def ShardedDim(self, i: int) -> ShardedDim | None: ...
  def ShardedDimLength(self) -> int: ...
  def ShardedDimIsNone(self) -> bool: ...
def ShardingSpecStart(builder: flatbuffers.Builder) -> None: ...
def ShardingSpecAddTensorName(builder: flatbuffers.Builder, tensorName: uoffset) -> None: ...
def ShardingSpecAddDevice(builder: flatbuffers.Builder, device: uoffset) -> None: ...
def ShardingSpecStartDeviceVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ShardingSpecAddIndexToDeviceGroupMap(builder: flatbuffers.Builder, indexToDeviceGroupMap: uoffset) -> None: ...
def ShardingSpecStartIndexToDeviceGroupMapVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ShardingSpecAddShardedDim(builder: flatbuffers.Builder, shardedDim: uoffset) -> None: ...
def ShardingSpecStartShardedDimVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ShardingSpecEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ShardedDim(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ShardedDim: ...
  @classmethod
  def GetRootAsShardedDim(cls, buf: bytes, offset: int) -> ShardedDim: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Axis(self) -> int: ...
  def SimpleSharding(self, i: int) -> SimpleShardedDim | None: ...
  def SimpleShardingLength(self) -> int: ...
  def SimpleShardingIsNone(self) -> bool: ...
def ShardedDimStart(builder: flatbuffers.Builder) -> None: ...
def ShardedDimAddAxis(builder: flatbuffers.Builder, axis: int) -> None: ...
def ShardedDimAddSimpleSharding(builder: flatbuffers.Builder, simpleSharding: uoffset) -> None: ...
def ShardedDimStartSimpleShardingVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ShardedDimEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SimpleShardedDim(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SimpleShardedDim: ...
  @classmethod
  def GetRootAsSimpleShardedDim(cls, buf: bytes, offset: int) -> SimpleShardedDim: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Dim(self) -> DimensionValue | None: ...
  def NumShards(self) -> int: ...
def SimpleShardedDimStart(builder: flatbuffers.Builder) -> None: ...
def SimpleShardedDimAddDim(builder: flatbuffers.Builder, dim: uoffset) -> None: ...
def SimpleShardedDimAddNumShards(builder: flatbuffers.Builder, numShards: int) -> None: ...
def SimpleShardedDimEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TrainingInfo(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TrainingInfo: ...
  @classmethod
  def GetRootAsTrainingInfo(cls, buf: bytes, offset: int) -> TrainingInfo: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Initialization(self) -> Graph | None: ...
  def Algorithm(self) -> Graph | None: ...
  def InitializationBinding(self, i: int) -> StringStringEntry | None: ...
  def InitializationBindingLength(self) -> int: ...
  def InitializationBindingIsNone(self) -> bool: ...
  def UpdateBinding(self, i: int) -> StringStringEntry | None: ...
  def UpdateBindingLength(self) -> int: ...
  def UpdateBindingIsNone(self) -> bool: ...
def TrainingInfoStart(builder: flatbuffers.Builder) -> None: ...
def TrainingInfoAddInitialization(builder: flatbuffers.Builder, initialization: uoffset) -> None: ...
def TrainingInfoAddAlgorithm(builder: flatbuffers.Builder, algorithm: uoffset) -> None: ...
def TrainingInfoAddInitializationBinding(builder: flatbuffers.Builder, initializationBinding: uoffset) -> None: ...
def TrainingInfoStartInitializationBindingVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TrainingInfoAddUpdateBinding(builder: flatbuffers.Builder, updateBinding: uoffset) -> None: ...
def TrainingInfoStartUpdateBindingVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TrainingInfoEnd(builder: flatbuffers.Builder) -> uoffset: ...
class DeviceConfiguration(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> DeviceConfiguration: ...
  @classmethod
  def GetRootAsDeviceConfiguration(cls, buf: bytes, offset: int) -> DeviceConfiguration: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def NumDevices(self) -> int: ...
  def Device(self, i: int) -> str: ...
  def DeviceLength(self) -> int: ...
  def DeviceIsNone(self) -> bool: ...
def DeviceConfigurationStart(builder: flatbuffers.Builder) -> None: ...
def DeviceConfigurationAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def DeviceConfigurationAddNumDevices(builder: flatbuffers.Builder, numDevices: int) -> None: ...
def DeviceConfigurationAddDevice(builder: flatbuffers.Builder, device: uoffset) -> None: ...
def DeviceConfigurationStartDeviceVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def DeviceConfigurationEnd(builder: flatbuffers.Builder) -> uoffset: ...
class StringStringEntry(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> StringStringEntry: ...
  @classmethod
  def GetRootAsStringStringEntry(cls, buf: bytes, offset: int) -> StringStringEntry: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Key(self) -> str | None: ...
  def Value(self) -> str | None: ...
def StringStringEntryStart(builder: flatbuffers.Builder) -> None: ...
def StringStringEntryAddKey(builder: flatbuffers.Builder, key: uoffset) -> None: ...
def StringStringEntryAddValue(builder: flatbuffers.Builder, value: uoffset) -> None: ...
def StringStringEntryEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TensorAnnotation(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TensorAnnotation: ...
  @classmethod
  def GetRootAsTensorAnnotation(cls, buf: bytes, offset: int) -> TensorAnnotation: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def TensorName(self) -> str | None: ...
  def QuantParameterTensorNames(self, i: int) -> StringStringEntry | None: ...
  def QuantParameterTensorNamesLength(self) -> int: ...
  def QuantParameterTensorNamesIsNone(self) -> bool: ...
def TensorAnnotationStart(builder: flatbuffers.Builder) -> None: ...
def TensorAnnotationAddTensorName(builder: flatbuffers.Builder, tensorName: uoffset) -> None: ...
def TensorAnnotationAddQuantParameterTensorNames(builder: flatbuffers.Builder, quantParameterTensorNames: uoffset) -> None: ...
def TensorAnnotationStartQuantParameterTensorNamesVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TensorAnnotationEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Tensor(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Tensor: ...
  @classmethod
  def GetRootAsTensor(cls, buf: bytes, offset: int) -> Tensor: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def DocString(self) -> str | None: ...
  def Dims(self, i: int) -> typing.List[int]: ...
  def DimsAsNumpy(self) -> np.ndarray: ...
  def DimsLength(self) -> int: ...
  def DimsIsNone(self) -> bool: ...
  def DataType(self) -> typing.Literal[DataType.UNDEFINED, DataType.FLOAT, DataType.UINT8, DataType.INT8, DataType.UINT16, DataType.INT16, DataType.INT32, DataType.INT64, DataType.STRING, DataType.BOOL, DataType.FLOAT16, DataType.DOUBLE, DataType.UINT32, DataType.UINT64, DataType.COMPLEX64, DataType.COMPLEX128, DataType.BFLOAT16, DataType.FLOAT8E4M3FN, DataType.FLOAT8E4M3FNUZ, DataType.FLOAT8E5M2, DataType.FLOAT8E5M2FNUZ, DataType.UINT4, DataType.INT4, DataType.FLOAT4E2M1, DataType.FLOAT8E8M0]: ...
  def RawData(self, i: int) -> typing.List[int]: ...
  def RawDataAsNumpy(self) -> np.ndarray: ...
  def RawDataLength(self) -> int: ...
  def RawDataIsNone(self) -> bool: ...
  def StringData(self, i: int) -> str: ...
  def StringDataLength(self) -> int: ...
  def StringDataIsNone(self) -> bool: ...
  def ExternalData(self, i: int) -> StringStringEntry | None: ...
  def ExternalDataLength(self) -> int: ...
  def ExternalDataIsNone(self) -> bool: ...
  def DataLocation(self) -> typing.Literal[TensorDataLocation.DEFAULT, TensorDataLocation.EXTERNAL]: ...
  def MetadataProps(self, i: int) -> StringStringEntry | None: ...
  def MetadataPropsLength(self) -> int: ...
  def MetadataPropsIsNone(self) -> bool: ...
def TensorStart(builder: flatbuffers.Builder) -> None: ...
def TensorAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def TensorAddDocString(builder: flatbuffers.Builder, docString: uoffset) -> None: ...
def TensorAddDims(builder: flatbuffers.Builder, dims: uoffset) -> None: ...
def TensorStartDimsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TensorAddDataType(builder: flatbuffers.Builder, dataType: typing.Literal[DataType.UNDEFINED, DataType.FLOAT, DataType.UINT8, DataType.INT8, DataType.UINT16, DataType.INT16, DataType.INT32, DataType.INT64, DataType.STRING, DataType.BOOL, DataType.FLOAT16, DataType.DOUBLE, DataType.UINT32, DataType.UINT64, DataType.COMPLEX64, DataType.COMPLEX128, DataType.BFLOAT16, DataType.FLOAT8E4M3FN, DataType.FLOAT8E4M3FNUZ, DataType.FLOAT8E5M2, DataType.FLOAT8E5M2FNUZ, DataType.UINT4, DataType.INT4, DataType.FLOAT4E2M1, DataType.FLOAT8E8M0]) -> None: ...
def TensorAddRawData(builder: flatbuffers.Builder, rawData: uoffset) -> None: ...
def TensorStartRawDataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TensorAddStringData(builder: flatbuffers.Builder, stringData: uoffset) -> None: ...
def TensorStartStringDataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TensorAddExternalData(builder: flatbuffers.Builder, externalData: uoffset) -> None: ...
def TensorStartExternalDataVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TensorAddDataLocation(builder: flatbuffers.Builder, dataLocation: typing.Literal[TensorDataLocation.DEFAULT, TensorDataLocation.EXTERNAL]) -> None: ...
def TensorAddMetadataProps(builder: flatbuffers.Builder, metadataProps: uoffset) -> None: ...
def TensorStartMetadataPropsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TensorEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TensorSegment(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TensorSegment: ...
  @classmethod
  def GetRootAsTensorSegment(cls, buf: bytes, offset: int) -> TensorSegment: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Begin(self) -> int: ...
  def End(self) -> int: ...
def TensorSegmentStart(builder: flatbuffers.Builder) -> None: ...
def TensorSegmentAddBegin(builder: flatbuffers.Builder, begin: int) -> None: ...
def TensorSegmentAddEnd(builder: flatbuffers.Builder, end: int) -> None: ...
def TensorSegmentEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SparseTensor(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SparseTensor: ...
  @classmethod
  def GetRootAsSparseTensor(cls, buf: bytes, offset: int) -> SparseTensor: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Values(self) -> Tensor | None: ...
  def Indices(self) -> Tensor | None: ...
  def Dims(self, i: int) -> typing.List[int]: ...
  def DimsAsNumpy(self) -> np.ndarray: ...
  def DimsLength(self) -> int: ...
  def DimsIsNone(self) -> bool: ...
def SparseTensorStart(builder: flatbuffers.Builder) -> None: ...
def SparseTensorAddValues(builder: flatbuffers.Builder, values: uoffset) -> None: ...
def SparseTensorAddIndices(builder: flatbuffers.Builder, indices: uoffset) -> None: ...
def SparseTensorAddDims(builder: flatbuffers.Builder, dims: uoffset) -> None: ...
def SparseTensorStartDimsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def SparseTensorEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Shape(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Shape: ...
  @classmethod
  def GetRootAsShape(cls, buf: bytes, offset: int) -> Shape: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Dim(self, i: int) -> Dimension | None: ...
  def DimLength(self) -> int: ...
  def DimIsNone(self) -> bool: ...
def ShapeStart(builder: flatbuffers.Builder) -> None: ...
def ShapeAddDim(builder: flatbuffers.Builder, dim: uoffset) -> None: ...
def ShapeStartDimVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ShapeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Dimension(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Dimension: ...
  @classmethod
  def GetRootAsDimension(cls, buf: bytes, offset: int) -> Dimension: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Value(self) -> DimensionValue | None: ...
  def Denotation(self) -> str | None: ...
def DimensionStart(builder: flatbuffers.Builder) -> None: ...
def DimensionAddValue(builder: flatbuffers.Builder, value: uoffset) -> None: ...
def DimensionAddDenotation(builder: flatbuffers.Builder, denotation: uoffset) -> None: ...
def DimensionEnd(builder: flatbuffers.Builder) -> uoffset: ...
class DimensionValue(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> DimensionValue: ...
  @classmethod
  def GetRootAsDimensionValue(cls, buf: bytes, offset: int) -> DimensionValue: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def DimType(self) -> typing.Literal[DimensionValueType.UNKNOWN, DimensionValueType.VALUE, DimensionValueType.PARAM]: ...
  def DimValue(self) -> int: ...
  def DimParam(self) -> str | None: ...
def DimensionValueStart(builder: flatbuffers.Builder) -> None: ...
def DimensionValueAddDimType(builder: flatbuffers.Builder, dimType: typing.Literal[DimensionValueType.UNKNOWN, DimensionValueType.VALUE, DimensionValueType.PARAM]) -> None: ...
def DimensionValueAddDimValue(builder: flatbuffers.Builder, dimValue: int) -> None: ...
def DimensionValueAddDimParam(builder: flatbuffers.Builder, dimParam: uoffset) -> None: ...
def DimensionValueEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TypeInfo(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TypeInfo: ...
  @classmethod
  def GetRootAsTypeInfo(cls, buf: bytes, offset: int) -> TypeInfo: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def ValueType(self) -> typing.Literal[ValueType.NONE, ValueType.tensor_type, ValueType.sequence_type, ValueType.map_type, ValueType.optional_type, ValueType.sparse_tensor_type]: ...
  def Value(self) -> table.Table | None: ...
  def Denotation(self) -> str | None: ...
def TypeInfoStart(builder: flatbuffers.Builder) -> None: ...
def TypeInfoAddValueType(builder: flatbuffers.Builder, valueType: typing.Literal[ValueType.NONE, ValueType.tensor_type, ValueType.sequence_type, ValueType.map_type, ValueType.optional_type, ValueType.sparse_tensor_type]) -> None: ...
def TypeInfoAddValue(builder: flatbuffers.Builder, value: uoffset) -> None: ...
def TypeInfoAddDenotation(builder: flatbuffers.Builder, denotation: uoffset) -> None: ...
def TypeInfoEnd(builder: flatbuffers.Builder) -> uoffset: ...
class TensorType(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> TensorType: ...
  @classmethod
  def GetRootAsTensorType(cls, buf: bytes, offset: int) -> TensorType: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def ElemType(self) -> typing.Literal[DataType.UNDEFINED, DataType.FLOAT, DataType.UINT8, DataType.INT8, DataType.UINT16, DataType.INT16, DataType.INT32, DataType.INT64, DataType.STRING, DataType.BOOL, DataType.FLOAT16, DataType.DOUBLE, DataType.UINT32, DataType.UINT64, DataType.COMPLEX64, DataType.COMPLEX128, DataType.BFLOAT16, DataType.FLOAT8E4M3FN, DataType.FLOAT8E4M3FNUZ, DataType.FLOAT8E5M2, DataType.FLOAT8E5M2FNUZ, DataType.UINT4, DataType.INT4, DataType.FLOAT4E2M1, DataType.FLOAT8E8M0]: ...
  def Shape(self) -> Shape | None: ...
def TensorTypeStart(builder: flatbuffers.Builder) -> None: ...
def TensorTypeAddElemType(builder: flatbuffers.Builder, elemType: typing.Literal[DataType.UNDEFINED, DataType.FLOAT, DataType.UINT8, DataType.INT8, DataType.UINT16, DataType.INT16, DataType.INT32, DataType.INT64, DataType.STRING, DataType.BOOL, DataType.FLOAT16, DataType.DOUBLE, DataType.UINT32, DataType.UINT64, DataType.COMPLEX64, DataType.COMPLEX128, DataType.BFLOAT16, DataType.FLOAT8E4M3FN, DataType.FLOAT8E4M3FNUZ, DataType.FLOAT8E5M2, DataType.FLOAT8E5M2FNUZ, DataType.UINT4, DataType.INT4, DataType.FLOAT4E2M1, DataType.FLOAT8E8M0]) -> None: ...
def TensorTypeAddShape(builder: flatbuffers.Builder, shape: uoffset) -> None: ...
def TensorTypeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SequenceType(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SequenceType: ...
  @classmethod
  def GetRootAsSequenceType(cls, buf: bytes, offset: int) -> SequenceType: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def ElemTypeType(self) -> typing.Literal[ValueType.NONE, ValueType.tensor_type, ValueType.sequence_type, ValueType.map_type, ValueType.optional_type, ValueType.sparse_tensor_type]: ...
  def ElemType(self) -> table.Table | None: ...
def SequenceTypeStart(builder: flatbuffers.Builder) -> None: ...
def SequenceTypeAddElemTypeType(builder: flatbuffers.Builder, elemTypeType: typing.Literal[ValueType.NONE, ValueType.tensor_type, ValueType.sequence_type, ValueType.map_type, ValueType.optional_type, ValueType.sparse_tensor_type]) -> None: ...
def SequenceTypeAddElemType(builder: flatbuffers.Builder, elemType: uoffset) -> None: ...
def SequenceTypeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class MapType(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> MapType: ...
  @classmethod
  def GetRootAsMapType(cls, buf: bytes, offset: int) -> MapType: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def KeyType(self) -> typing.Literal[DataType.UNDEFINED, DataType.FLOAT, DataType.UINT8, DataType.INT8, DataType.UINT16, DataType.INT16, DataType.INT32, DataType.INT64, DataType.STRING, DataType.BOOL, DataType.FLOAT16, DataType.DOUBLE, DataType.UINT32, DataType.UINT64, DataType.COMPLEX64, DataType.COMPLEX128, DataType.BFLOAT16, DataType.FLOAT8E4M3FN, DataType.FLOAT8E4M3FNUZ, DataType.FLOAT8E5M2, DataType.FLOAT8E5M2FNUZ, DataType.UINT4, DataType.INT4, DataType.FLOAT4E2M1, DataType.FLOAT8E8M0]: ...
  def ValueTypeType(self) -> typing.Literal[ValueType.NONE, ValueType.tensor_type, ValueType.sequence_type, ValueType.map_type, ValueType.optional_type, ValueType.sparse_tensor_type]: ...
  def ValueType(self) -> table.Table | None: ...
def MapTypeStart(builder: flatbuffers.Builder) -> None: ...
def MapTypeAddKeyType(builder: flatbuffers.Builder, keyType: typing.Literal[DataType.UNDEFINED, DataType.FLOAT, DataType.UINT8, DataType.INT8, DataType.UINT16, DataType.INT16, DataType.INT32, DataType.INT64, DataType.STRING, DataType.BOOL, DataType.FLOAT16, DataType.DOUBLE, DataType.UINT32, DataType.UINT64, DataType.COMPLEX64, DataType.COMPLEX128, DataType.BFLOAT16, DataType.FLOAT8E4M3FN, DataType.FLOAT8E4M3FNUZ, DataType.FLOAT8E5M2, DataType.FLOAT8E5M2FNUZ, DataType.UINT4, DataType.INT4, DataType.FLOAT4E2M1, DataType.FLOAT8E8M0]) -> None: ...
def MapTypeAddValueTypeType(builder: flatbuffers.Builder, valueTypeType: typing.Literal[ValueType.NONE, ValueType.tensor_type, ValueType.sequence_type, ValueType.map_type, ValueType.optional_type, ValueType.sparse_tensor_type]) -> None: ...
def MapTypeAddValueType(builder: flatbuffers.Builder, valueType: uoffset) -> None: ...
def MapTypeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class OptionalType(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> OptionalType: ...
  @classmethod
  def GetRootAsOptionalType(cls, buf: bytes, offset: int) -> OptionalType: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def ElemTypeType(self) -> typing.Literal[ValueType.NONE, ValueType.tensor_type, ValueType.sequence_type, ValueType.map_type, ValueType.optional_type, ValueType.sparse_tensor_type]: ...
  def ElemType(self) -> table.Table | None: ...
def OptionalTypeStart(builder: flatbuffers.Builder) -> None: ...
def OptionalTypeAddElemTypeType(builder: flatbuffers.Builder, elemTypeType: typing.Literal[ValueType.NONE, ValueType.tensor_type, ValueType.sequence_type, ValueType.map_type, ValueType.optional_type, ValueType.sparse_tensor_type]) -> None: ...
def OptionalTypeAddElemType(builder: flatbuffers.Builder, elemType: uoffset) -> None: ...
def OptionalTypeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class SparseTensorType(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> SparseTensorType: ...
  @classmethod
  def GetRootAsSparseTensorType(cls, buf: bytes, offset: int) -> SparseTensorType: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def ElemType(self) -> typing.Literal[DataType.UNDEFINED, DataType.FLOAT, DataType.UINT8, DataType.INT8, DataType.UINT16, DataType.INT16, DataType.INT32, DataType.INT64, DataType.STRING, DataType.BOOL, DataType.FLOAT16, DataType.DOUBLE, DataType.UINT32, DataType.UINT64, DataType.COMPLEX64, DataType.COMPLEX128, DataType.BFLOAT16, DataType.FLOAT8E4M3FN, DataType.FLOAT8E4M3FNUZ, DataType.FLOAT8E5M2, DataType.FLOAT8E5M2FNUZ, DataType.UINT4, DataType.INT4, DataType.FLOAT4E2M1, DataType.FLOAT8E8M0]: ...
  def Shape(self) -> Shape | None: ...
def SparseTensorTypeStart(builder: flatbuffers.Builder) -> None: ...
def SparseTensorTypeAddElemType(builder: flatbuffers.Builder, elemType: typing.Literal[DataType.UNDEFINED, DataType.FLOAT, DataType.UINT8, DataType.INT8, DataType.UINT16, DataType.INT16, DataType.INT32, DataType.INT64, DataType.STRING, DataType.BOOL, DataType.FLOAT16, DataType.DOUBLE, DataType.UINT32, DataType.UINT64, DataType.COMPLEX64, DataType.COMPLEX128, DataType.BFLOAT16, DataType.FLOAT8E4M3FN, DataType.FLOAT8E4M3FNUZ, DataType.FLOAT8E5M2, DataType.FLOAT8E5M2FNUZ, DataType.UINT4, DataType.INT4, DataType.FLOAT4E2M1, DataType.FLOAT8E8M0]) -> None: ...
def SparseTensorTypeAddShape(builder: flatbuffers.Builder, shape: uoffset) -> None: ...
def SparseTensorTypeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class OperatorSetId(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> OperatorSetId: ...
  @classmethod
  def GetRootAsOperatorSetId(cls, buf: bytes, offset: int) -> OperatorSetId: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Domain(self) -> str | None: ...
  def Version(self) -> int: ...
def OperatorSetIdStart(builder: flatbuffers.Builder) -> None: ...
def OperatorSetIdAddDomain(builder: flatbuffers.Builder, domain: uoffset) -> None: ...
def OperatorSetIdAddVersion(builder: flatbuffers.Builder, version: int) -> None: ...
def OperatorSetIdEnd(builder: flatbuffers.Builder) -> uoffset: ...
class ValueInfo(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> ValueInfo: ...
  @classmethod
  def GetRootAsValueInfo(cls, buf: bytes, offset: int) -> ValueInfo: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def Type(self) -> TypeInfo | None: ...
  def DocString(self) -> str | None: ...
  def MetadataProps(self, i: int) -> StringStringEntry | None: ...
  def MetadataPropsLength(self) -> int: ...
  def MetadataPropsIsNone(self) -> bool: ...
def ValueInfoStart(builder: flatbuffers.Builder) -> None: ...
def ValueInfoAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def ValueInfoAddType(builder: flatbuffers.Builder, type: uoffset) -> None: ...
def ValueInfoAddDocString(builder: flatbuffers.Builder, docString: uoffset) -> None: ...
def ValueInfoAddMetadataProps(builder: flatbuffers.Builder, metadataProps: uoffset) -> None: ...
def ValueInfoStartMetadataPropsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ValueInfoEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Node(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Node: ...
  @classmethod
  def GetRootAsNode(cls, buf: bytes, offset: int) -> Node: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def OpType(self) -> str | None: ...
  def Domain(self) -> str | None: ...
  def Overload(self) -> str | None: ...
  def Input(self, i: int) -> str: ...
  def InputLength(self) -> int: ...
  def InputIsNone(self) -> bool: ...
  def Output(self, i: int) -> str: ...
  def OutputLength(self) -> int: ...
  def OutputIsNone(self) -> bool: ...
  def Attribute(self, i: int) -> Attribute | None: ...
  def AttributeLength(self) -> int: ...
  def AttributeIsNone(self) -> bool: ...
  def DeviceConfigurations(self, i: int) -> NodeDeviceConfiguration | None: ...
  def DeviceConfigurationsLength(self) -> int: ...
  def DeviceConfigurationsIsNone(self) -> bool: ...
  def DocString(self) -> str | None: ...
  def MetadataProps(self, i: int) -> StringStringEntry | None: ...
  def MetadataPropsLength(self) -> int: ...
  def MetadataPropsIsNone(self) -> bool: ...
def NodeStart(builder: flatbuffers.Builder) -> None: ...
def NodeAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def NodeAddOpType(builder: flatbuffers.Builder, opType: uoffset) -> None: ...
def NodeAddDomain(builder: flatbuffers.Builder, domain: uoffset) -> None: ...
def NodeAddOverload(builder: flatbuffers.Builder, overload: uoffset) -> None: ...
def NodeAddInput(builder: flatbuffers.Builder, input: uoffset) -> None: ...
def NodeStartInputVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def NodeAddOutput(builder: flatbuffers.Builder, output: uoffset) -> None: ...
def NodeStartOutputVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def NodeAddAttribute(builder: flatbuffers.Builder, attribute: uoffset) -> None: ...
def NodeStartAttributeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def NodeAddDeviceConfigurations(builder: flatbuffers.Builder, deviceConfigurations: uoffset) -> None: ...
def NodeStartDeviceConfigurationsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def NodeAddDocString(builder: flatbuffers.Builder, docString: uoffset) -> None: ...
def NodeAddMetadataProps(builder: flatbuffers.Builder, metadataProps: uoffset) -> None: ...
def NodeStartMetadataPropsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def NodeEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Graph(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Graph: ...
  @classmethod
  def GetRootAsGraph(cls, buf: bytes, offset: int) -> Graph: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def Node(self, i: int) -> Node | None: ...
  def NodeLength(self) -> int: ...
  def NodeIsNone(self) -> bool: ...
  def Initializer(self, i: int) -> Tensor | None: ...
  def InitializerLength(self) -> int: ...
  def InitializerIsNone(self) -> bool: ...
  def SparseInitializer(self, i: int) -> SparseTensor | None: ...
  def SparseInitializerLength(self) -> int: ...
  def SparseInitializerIsNone(self) -> bool: ...
  def Input(self, i: int) -> ValueInfo | None: ...
  def InputLength(self) -> int: ...
  def InputIsNone(self) -> bool: ...
  def Output(self, i: int) -> ValueInfo | None: ...
  def OutputLength(self) -> int: ...
  def OutputIsNone(self) -> bool: ...
  def ValueInfo(self, i: int) -> ValueInfo | None: ...
  def ValueInfoLength(self) -> int: ...
  def ValueInfoIsNone(self) -> bool: ...
  def QuantizationAnnotation(self, i: int) -> TensorAnnotation | None: ...
  def QuantizationAnnotationLength(self) -> int: ...
  def QuantizationAnnotationIsNone(self) -> bool: ...
  def DocString(self) -> str | None: ...
  def MetadataProps(self, i: int) -> StringStringEntry | None: ...
  def MetadataPropsLength(self) -> int: ...
  def MetadataPropsIsNone(self) -> bool: ...
def GraphStart(builder: flatbuffers.Builder) -> None: ...
def GraphAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def GraphAddNode(builder: flatbuffers.Builder, node: uoffset) -> None: ...
def GraphStartNodeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GraphAddInitializer(builder: flatbuffers.Builder, initializer: uoffset) -> None: ...
def GraphStartInitializerVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GraphAddSparseInitializer(builder: flatbuffers.Builder, sparseInitializer: uoffset) -> None: ...
def GraphStartSparseInitializerVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GraphAddInput(builder: flatbuffers.Builder, input: uoffset) -> None: ...
def GraphStartInputVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GraphAddOutput(builder: flatbuffers.Builder, output: uoffset) -> None: ...
def GraphStartOutputVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GraphAddValueInfo(builder: flatbuffers.Builder, valueInfo: uoffset) -> None: ...
def GraphStartValueInfoVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GraphAddQuantizationAnnotation(builder: flatbuffers.Builder, quantizationAnnotation: uoffset) -> None: ...
def GraphStartQuantizationAnnotationVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GraphAddDocString(builder: flatbuffers.Builder, docString: uoffset) -> None: ...
def GraphAddMetadataProps(builder: flatbuffers.Builder, metadataProps: uoffset) -> None: ...
def GraphStartMetadataPropsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def GraphEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Function(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Function: ...
  @classmethod
  def GetRootAsFunction(cls, buf: bytes, offset: int) -> Function: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def Name(self) -> str | None: ...
  def Domain(self) -> str | None: ...
  def Overload(self) -> str | None: ...
  def OpsetImport(self, i: int) -> OperatorSetId | None: ...
  def OpsetImportLength(self) -> int: ...
  def OpsetImportIsNone(self) -> bool: ...
  def Input(self, i: int) -> str: ...
  def InputLength(self) -> int: ...
  def InputIsNone(self) -> bool: ...
  def Output(self, i: int) -> str: ...
  def OutputLength(self) -> int: ...
  def OutputIsNone(self) -> bool: ...
  def Attribute(self, i: int) -> Attribute | None: ...
  def AttributeLength(self) -> int: ...
  def AttributeIsNone(self) -> bool: ...
  def Node(self, i: int) -> Node | None: ...
  def NodeLength(self) -> int: ...
  def NodeIsNone(self) -> bool: ...
  def ValueInfo(self, i: int) -> ValueInfo | None: ...
  def ValueInfoLength(self) -> int: ...
  def ValueInfoIsNone(self) -> bool: ...
  def DocString(self) -> str | None: ...
  def MetadataProps(self, i: int) -> StringStringEntry | None: ...
  def MetadataPropsLength(self) -> int: ...
  def MetadataPropsIsNone(self) -> bool: ...
def FunctionStart(builder: flatbuffers.Builder) -> None: ...
def FunctionAddName(builder: flatbuffers.Builder, name: uoffset) -> None: ...
def FunctionAddDomain(builder: flatbuffers.Builder, domain: uoffset) -> None: ...
def FunctionAddOverload(builder: flatbuffers.Builder, overload: uoffset) -> None: ...
def FunctionAddOpsetImport(builder: flatbuffers.Builder, opsetImport: uoffset) -> None: ...
def FunctionStartOpsetImportVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def FunctionAddInput(builder: flatbuffers.Builder, input: uoffset) -> None: ...
def FunctionStartInputVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def FunctionAddOutput(builder: flatbuffers.Builder, output: uoffset) -> None: ...
def FunctionStartOutputVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def FunctionAddAttribute(builder: flatbuffers.Builder, attribute: uoffset) -> None: ...
def FunctionStartAttributeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def FunctionAddNode(builder: flatbuffers.Builder, node: uoffset) -> None: ...
def FunctionStartNodeVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def FunctionAddValueInfo(builder: flatbuffers.Builder, valueInfo: uoffset) -> None: ...
def FunctionStartValueInfoVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def FunctionAddDocString(builder: flatbuffers.Builder, docString: uoffset) -> None: ...
def FunctionAddMetadataProps(builder: flatbuffers.Builder, metadataProps: uoffset) -> None: ...
def FunctionStartMetadataPropsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def FunctionEnd(builder: flatbuffers.Builder) -> uoffset: ...
class Model(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Model: ...
  @classmethod
  def GetRootAsModel(cls, buf: bytes, offset: int) -> Model: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def IrVersion(self) -> int: ...
  def OpsetImport(self, i: int) -> OperatorSetId | None: ...
  def OpsetImportLength(self) -> int: ...
  def OpsetImportIsNone(self) -> bool: ...
  def ProducerName(self) -> str | None: ...
  def ProducerVersion(self) -> str | None: ...
  def Domain(self) -> str | None: ...
  def ModelVersion(self) -> int: ...
  def Graph(self) -> Graph | None: ...
  def Functions(self, i: int) -> Function | None: ...
  def FunctionsLength(self) -> int: ...
  def FunctionsIsNone(self) -> bool: ...
  def TrainingInfo(self, i: int) -> TrainingInfo | None: ...
  def TrainingInfoLength(self) -> int: ...
  def TrainingInfoIsNone(self) -> bool: ...
  def Configuration(self, i: int) -> DeviceConfiguration | None: ...
  def ConfigurationLength(self) -> int: ...
  def ConfigurationIsNone(self) -> bool: ...
  def DocString(self) -> str | None: ...
  def MetadataProps(self, i: int) -> StringStringEntry | None: ...
  def MetadataPropsLength(self) -> int: ...
  def MetadataPropsIsNone(self) -> bool: ...
def ModelStart(builder: flatbuffers.Builder) -> None: ...
def ModelAddIrVersion(builder: flatbuffers.Builder, irVersion: int) -> None: ...
def ModelAddOpsetImport(builder: flatbuffers.Builder, opsetImport: uoffset) -> None: ...
def ModelStartOpsetImportVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ModelAddProducerName(builder: flatbuffers.Builder, producerName: uoffset) -> None: ...
def ModelAddProducerVersion(builder: flatbuffers.Builder, producerVersion: uoffset) -> None: ...
def ModelAddDomain(builder: flatbuffers.Builder, domain: uoffset) -> None: ...
def ModelAddModelVersion(builder: flatbuffers.Builder, modelVersion: int) -> None: ...
def ModelAddGraph(builder: flatbuffers.Builder, graph: uoffset) -> None: ...
def ModelAddFunctions(builder: flatbuffers.Builder, functions: uoffset) -> None: ...
def ModelStartFunctionsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ModelAddTrainingInfo(builder: flatbuffers.Builder, trainingInfo: uoffset) -> None: ...
def ModelStartTrainingInfoVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ModelAddConfiguration(builder: flatbuffers.Builder, configuration: uoffset) -> None: ...
def ModelStartConfigurationVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ModelAddDocString(builder: flatbuffers.Builder, docString: uoffset) -> None: ...
def ModelAddMetadataProps(builder: flatbuffers.Builder, metadataProps: uoffset) -> None: ...
def ModelStartMetadataPropsVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def ModelEnd(builder: flatbuffers.Builder) -> uoffset: ...

