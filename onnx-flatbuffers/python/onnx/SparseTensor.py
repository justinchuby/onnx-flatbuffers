# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SparseTensor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SparseTensor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSparseTensor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SparseTensor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SparseTensor
    def Values(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SparseTensor
    def Indices(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SparseTensor
    def Dims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SparseTensor
    def DimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # SparseTensor
    def DimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SparseTensor
    def DimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def SparseTensorStart(builder):
    builder.StartObject(3)

def Start(builder):
    SparseTensorStart(builder)

def SparseTensorAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    SparseTensorAddValues(builder, values)

def SparseTensorAddIndices(builder, indices):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)

def AddIndices(builder, indices):
    SparseTensorAddIndices(builder, indices)

def SparseTensorAddDims(builder, dims):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dims), 0)

def AddDims(builder, dims):
    SparseTensorAddDims(builder, dims)

def SparseTensorStartDimsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartDimsVector(builder, numElems):
    return SparseTensorStartDimsVector(builder, numElems)

def SparseTensorEnd(builder):
    return builder.EndObject()

def End(builder):
    return SparseTensorEnd(builder)

import onnx.Tensor
try:
    from typing import List, Optional
except:
    pass

class SparseTensorT(object):

    # SparseTensorT
    def __init__(self):
        self.values = None  # type: Optional[onnx.Tensor.TensorT]
        self.indices = None  # type: Optional[onnx.Tensor.TensorT]
        self.dims = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sparseTensor = SparseTensor()
        sparseTensor.Init(buf, pos)
        return cls.InitFromObj(sparseTensor)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sparseTensor):
        x = SparseTensorT()
        x._UnPack(sparseTensor)
        return x

    # SparseTensorT
    def _UnPack(self, sparseTensor):
        if sparseTensor is None:
            return
        if sparseTensor.Values() is not None:
            self.values = onnx.Tensor.TensorT.InitFromObj(sparseTensor.Values())
        if sparseTensor.Indices() is not None:
            self.indices = onnx.Tensor.TensorT.InitFromObj(sparseTensor.Indices())
        if not sparseTensor.DimsIsNone():
            if np is None:
                self.dims = []
                for i in range(sparseTensor.DimsLength()):
                    self.dims.append(sparseTensor.Dims(i))
            else:
                self.dims = sparseTensor.DimsAsNumpy()

    # SparseTensorT
    def Pack(self, builder):
        if self.values is not None:
            values = self.values.Pack(builder)
        if self.indices is not None:
            indices = self.indices.Pack(builder)
        if self.dims is not None:
            if np is not None and type(self.dims) is np.ndarray:
                dims = builder.CreateNumpyVector(self.dims)
            else:
                SparseTensorStartDimsVector(builder, len(self.dims))
                for i in reversed(range(len(self.dims))):
                    builder.PrependInt64(self.dims[i])
                dims = builder.EndVector()
        SparseTensorStart(builder)
        if self.values is not None:
            SparseTensorAddValues(builder, values)
        if self.indices is not None:
            SparseTensorAddIndices(builder, indices)
        if self.dims is not None:
            SparseTensorAddDims(builder, dims)
        sparseTensor = SparseTensorEnd(builder)
        return sparseTensor
