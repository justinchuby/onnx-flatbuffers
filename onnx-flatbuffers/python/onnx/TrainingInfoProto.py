# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TrainingInfoProto(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrainingInfoProto()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrainingInfoProto(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TrainingInfoProto
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrainingInfoProto
    def Initialization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.GraphProto import GraphProto
            obj = GraphProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfoProto
    def Algorithm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.GraphProto import GraphProto
            obj = GraphProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfoProto
    def InitializationBinding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.StringStringEntryProto import StringStringEntryProto
            obj = StringStringEntryProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfoProto
    def InitializationBindingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrainingInfoProto
    def InitializationBindingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TrainingInfoProto
    def UpdateBinding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.StringStringEntryProto import StringStringEntryProto
            obj = StringStringEntryProto()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfoProto
    def UpdateBindingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrainingInfoProto
    def UpdateBindingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def TrainingInfoProtoStart(builder):
    builder.StartObject(4)

def Start(builder):
    TrainingInfoProtoStart(builder)

def TrainingInfoProtoAddInitialization(builder, initialization):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(initialization), 0)

def AddInitialization(builder, initialization):
    TrainingInfoProtoAddInitialization(builder, initialization)

def TrainingInfoProtoAddAlgorithm(builder, algorithm):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(algorithm), 0)

def AddAlgorithm(builder, algorithm):
    TrainingInfoProtoAddAlgorithm(builder, algorithm)

def TrainingInfoProtoAddInitializationBinding(builder, initializationBinding):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(initializationBinding), 0)

def AddInitializationBinding(builder, initializationBinding):
    TrainingInfoProtoAddInitializationBinding(builder, initializationBinding)

def TrainingInfoProtoStartInitializationBindingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInitializationBindingVector(builder, numElems: int) -> int:
    return TrainingInfoProtoStartInitializationBindingVector(builder, numElems)

def TrainingInfoProtoAddUpdateBinding(builder, updateBinding):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(updateBinding), 0)

def AddUpdateBinding(builder, updateBinding):
    TrainingInfoProtoAddUpdateBinding(builder, updateBinding)

def TrainingInfoProtoStartUpdateBindingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUpdateBindingVector(builder, numElems: int) -> int:
    return TrainingInfoProtoStartUpdateBindingVector(builder, numElems)

def TrainingInfoProtoEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrainingInfoProtoEnd(builder)
