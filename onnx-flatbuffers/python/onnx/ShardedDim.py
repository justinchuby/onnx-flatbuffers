# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShardedDim(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShardedDim()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShardedDim(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ShardedDim
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShardedDim
    def Axis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShardedDim
    def SimpleSharding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.SimpleShardedDim import SimpleShardedDim
            obj = SimpleShardedDim()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ShardedDim
    def SimpleShardingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ShardedDim
    def SimpleShardingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ShardedDimStart(builder):
    builder.StartObject(2)

def Start(builder):
    ShardedDimStart(builder)

def ShardedDimAddAxis(builder, axis):
    builder.PrependInt64Slot(0, axis, 0)

def AddAxis(builder, axis):
    ShardedDimAddAxis(builder, axis)

def ShardedDimAddSimpleSharding(builder, simpleSharding):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(simpleSharding), 0)

def AddSimpleSharding(builder, simpleSharding):
    ShardedDimAddSimpleSharding(builder, simpleSharding)

def ShardedDimStartSimpleShardingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSimpleShardingVector(builder, numElems):
    return ShardedDimStartSimpleShardingVector(builder, numElems)

def ShardedDimEnd(builder):
    return builder.EndObject()

def End(builder):
    return ShardedDimEnd(builder)

import onnx.SimpleShardedDim
try:
    from typing import List
except:
    pass

class ShardedDimT(object):

    # ShardedDimT
    def __init__(self):
        self.axis = 0  # type: int
        self.simpleSharding = None  # type: List[onnx.SimpleShardedDim.SimpleShardedDimT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        shardedDim = ShardedDim()
        shardedDim.Init(buf, pos)
        return cls.InitFromObj(shardedDim)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, shardedDim):
        x = ShardedDimT()
        x._UnPack(shardedDim)
        return x

    # ShardedDimT
    def _UnPack(self, shardedDim):
        if shardedDim is None:
            return
        self.axis = shardedDim.Axis()
        if not shardedDim.SimpleShardingIsNone():
            self.simpleSharding = []
            for i in range(shardedDim.SimpleShardingLength()):
                if shardedDim.SimpleSharding(i) is None:
                    self.simpleSharding.append(None)
                else:
                    simpleShardedDim_ = onnx.SimpleShardedDim.SimpleShardedDimT.InitFromObj(shardedDim.SimpleSharding(i))
                    self.simpleSharding.append(simpleShardedDim_)

    # ShardedDimT
    def Pack(self, builder):
        if self.simpleSharding is not None:
            simpleShardinglist = []
            for i in range(len(self.simpleSharding)):
                simpleShardinglist.append(self.simpleSharding[i].Pack(builder))
            ShardedDimStartSimpleShardingVector(builder, len(self.simpleSharding))
            for i in reversed(range(len(self.simpleSharding))):
                builder.PrependUOffsetTRelative(simpleShardinglist[i])
            simpleSharding = builder.EndVector()
        ShardedDimStart(builder)
        ShardedDimAddAxis(builder, self.axis)
        if self.simpleSharding is not None:
            ShardedDimAddSimpleSharding(builder, simpleSharding)
        shardedDim = ShardedDimEnd(builder)
        return shardedDim
