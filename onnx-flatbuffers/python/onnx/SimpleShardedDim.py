# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SimpleShardedDim(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SimpleShardedDim()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSimpleShardedDim(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SimpleShardedDim
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SimpleShardedDim
    def Dim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.DimensionValue import DimensionValue
            obj = DimensionValue()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SimpleShardedDim
    def NumShards(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def SimpleShardedDimStart(builder):
    builder.StartObject(2)

def Start(builder):
    SimpleShardedDimStart(builder)

def SimpleShardedDimAddDim(builder, dim):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dim), 0)

def AddDim(builder, dim):
    SimpleShardedDimAddDim(builder, dim)

def SimpleShardedDimAddNumShards(builder, numShards):
    builder.PrependInt64Slot(1, numShards, 0)

def AddNumShards(builder, numShards):
    SimpleShardedDimAddNumShards(builder, numShards)

def SimpleShardedDimEnd(builder):
    return builder.EndObject()

def End(builder):
    return SimpleShardedDimEnd(builder)
