# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IntIntListEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IntIntListEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIntIntListEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IntIntListEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IntIntListEntry
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # IntIntListEntry
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # IntIntListEntry
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # IntIntListEntry
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IntIntListEntry
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def IntIntListEntryStart(builder):
    builder.StartObject(2)

def Start(builder):
    IntIntListEntryStart(builder)

def IntIntListEntryAddKey(builder, key):
    builder.PrependInt64Slot(0, key, 0)

def AddKey(builder, key):
    IntIntListEntryAddKey(builder, key)

def IntIntListEntryAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    IntIntListEntryAddValue(builder, value)

def IntIntListEntryStartValueVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartValueVector(builder, numElems):
    return IntIntListEntryStartValueVector(builder, numElems)

def IntIntListEntryEnd(builder):
    return builder.EndObject()

def End(builder):
    return IntIntListEntryEnd(builder)

try:
    from typing import List
except:
    pass

class IntIntListEntryT(object):

    # IntIntListEntryT
    def __init__(self):
        self.key = 0  # type: int
        self.value = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        intIntListEntry = IntIntListEntry()
        intIntListEntry.Init(buf, pos)
        return cls.InitFromObj(intIntListEntry)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, intIntListEntry):
        x = IntIntListEntryT()
        x._UnPack(intIntListEntry)
        return x

    # IntIntListEntryT
    def _UnPack(self, intIntListEntry):
        if intIntListEntry is None:
            return
        self.key = intIntListEntry.Key()
        if not intIntListEntry.ValueIsNone():
            if np is None:
                self.value = []
                for i in range(intIntListEntry.ValueLength()):
                    self.value.append(intIntListEntry.Value(i))
            else:
                self.value = intIntListEntry.ValueAsNumpy()

    # IntIntListEntryT
    def Pack(self, builder):
        if self.value is not None:
            if np is not None and type(self.value) is np.ndarray:
                value = builder.CreateNumpyVector(self.value)
            else:
                IntIntListEntryStartValueVector(builder, len(self.value))
                for i in reversed(range(len(self.value))):
                    builder.PrependInt64(self.value[i])
                value = builder.EndVector()
        IntIntListEntryStart(builder)
        IntIntListEntryAddKey(builder, self.key)
        if self.value is not None:
            IntIntListEntryAddValue(builder, value)
        intIntListEntry = IntIntListEntryEnd(builder)
        return intIntListEntry
