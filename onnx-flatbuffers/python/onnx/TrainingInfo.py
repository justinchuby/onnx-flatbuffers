# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TrainingInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrainingInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTrainingInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TrainingInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrainingInfo
    def Initialization(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.Graph import Graph
            obj = Graph()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfo
    def Algorithm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.Graph import Graph
            obj = Graph()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfo
    def InitializationBinding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.StringStringEntry import StringStringEntry
            obj = StringStringEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfo
    def InitializationBindingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrainingInfo
    def InitializationBindingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TrainingInfo
    def UpdateBinding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.StringStringEntry import StringStringEntry
            obj = StringStringEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrainingInfo
    def UpdateBindingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TrainingInfo
    def UpdateBindingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def TrainingInfoStart(builder):
    builder.StartObject(4)

def Start(builder):
    TrainingInfoStart(builder)

def TrainingInfoAddInitialization(builder, initialization):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(initialization), 0)

def AddInitialization(builder, initialization):
    TrainingInfoAddInitialization(builder, initialization)

def TrainingInfoAddAlgorithm(builder, algorithm):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(algorithm), 0)

def AddAlgorithm(builder, algorithm):
    TrainingInfoAddAlgorithm(builder, algorithm)

def TrainingInfoAddInitializationBinding(builder, initializationBinding):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(initializationBinding), 0)

def AddInitializationBinding(builder, initializationBinding):
    TrainingInfoAddInitializationBinding(builder, initializationBinding)

def TrainingInfoStartInitializationBindingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInitializationBindingVector(builder, numElems):
    return TrainingInfoStartInitializationBindingVector(builder, numElems)

def TrainingInfoAddUpdateBinding(builder, updateBinding):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(updateBinding), 0)

def AddUpdateBinding(builder, updateBinding):
    TrainingInfoAddUpdateBinding(builder, updateBinding)

def TrainingInfoStartUpdateBindingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUpdateBindingVector(builder, numElems):
    return TrainingInfoStartUpdateBindingVector(builder, numElems)

def TrainingInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return TrainingInfoEnd(builder)

import onnx.Graph
import onnx.StringStringEntry
try:
    from typing import List, Optional
except:
    pass

class TrainingInfoT(object):

    # TrainingInfoT
    def __init__(self):
        self.initialization = None  # type: Optional[onnx.Graph.GraphT]
        self.algorithm = None  # type: Optional[onnx.Graph.GraphT]
        self.initializationBinding = None  # type: List[onnx.StringStringEntry.StringStringEntryT]
        self.updateBinding = None  # type: List[onnx.StringStringEntry.StringStringEntryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        trainingInfo = TrainingInfo()
        trainingInfo.Init(buf, pos)
        return cls.InitFromObj(trainingInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, trainingInfo):
        x = TrainingInfoT()
        x._UnPack(trainingInfo)
        return x

    # TrainingInfoT
    def _UnPack(self, trainingInfo):
        if trainingInfo is None:
            return
        if trainingInfo.Initialization() is not None:
            self.initialization = onnx.Graph.GraphT.InitFromObj(trainingInfo.Initialization())
        if trainingInfo.Algorithm() is not None:
            self.algorithm = onnx.Graph.GraphT.InitFromObj(trainingInfo.Algorithm())
        if not trainingInfo.InitializationBindingIsNone():
            self.initializationBinding = []
            for i in range(trainingInfo.InitializationBindingLength()):
                if trainingInfo.InitializationBinding(i) is None:
                    self.initializationBinding.append(None)
                else:
                    stringStringEntry_ = onnx.StringStringEntry.StringStringEntryT.InitFromObj(trainingInfo.InitializationBinding(i))
                    self.initializationBinding.append(stringStringEntry_)
        if not trainingInfo.UpdateBindingIsNone():
            self.updateBinding = []
            for i in range(trainingInfo.UpdateBindingLength()):
                if trainingInfo.UpdateBinding(i) is None:
                    self.updateBinding.append(None)
                else:
                    stringStringEntry_ = onnx.StringStringEntry.StringStringEntryT.InitFromObj(trainingInfo.UpdateBinding(i))
                    self.updateBinding.append(stringStringEntry_)

    # TrainingInfoT
    def Pack(self, builder):
        if self.initialization is not None:
            initialization = self.initialization.Pack(builder)
        if self.algorithm is not None:
            algorithm = self.algorithm.Pack(builder)
        if self.initializationBinding is not None:
            initializationBindinglist = []
            for i in range(len(self.initializationBinding)):
                initializationBindinglist.append(self.initializationBinding[i].Pack(builder))
            TrainingInfoStartInitializationBindingVector(builder, len(self.initializationBinding))
            for i in reversed(range(len(self.initializationBinding))):
                builder.PrependUOffsetTRelative(initializationBindinglist[i])
            initializationBinding = builder.EndVector()
        if self.updateBinding is not None:
            updateBindinglist = []
            for i in range(len(self.updateBinding)):
                updateBindinglist.append(self.updateBinding[i].Pack(builder))
            TrainingInfoStartUpdateBindingVector(builder, len(self.updateBinding))
            for i in reversed(range(len(self.updateBinding))):
                builder.PrependUOffsetTRelative(updateBindinglist[i])
            updateBinding = builder.EndVector()
        TrainingInfoStart(builder)
        if self.initialization is not None:
            TrainingInfoAddInitialization(builder, initialization)
        if self.algorithm is not None:
            TrainingInfoAddAlgorithm(builder, algorithm)
        if self.initializationBinding is not None:
            TrainingInfoAddInitializationBinding(builder, initializationBinding)
        if self.updateBinding is not None:
            TrainingInfoAddUpdateBinding(builder, updateBinding)
        trainingInfo = TrainingInfoEnd(builder)
        return trainingInfo
