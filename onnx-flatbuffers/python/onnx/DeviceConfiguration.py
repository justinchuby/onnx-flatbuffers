# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DeviceConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DeviceConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDeviceConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # DeviceConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DeviceConfiguration
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DeviceConfiguration
    def NumDevices(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DeviceConfiguration
    def Device(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DeviceConfiguration
    def DeviceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DeviceConfiguration
    def DeviceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def DeviceConfigurationStart(builder):
    builder.StartObject(3)

def Start(builder):
    DeviceConfigurationStart(builder)

def DeviceConfigurationAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    DeviceConfigurationAddName(builder, name)

def DeviceConfigurationAddNumDevices(builder, numDevices):
    builder.PrependInt32Slot(1, numDevices, 0)

def AddNumDevices(builder, numDevices):
    DeviceConfigurationAddNumDevices(builder, numDevices)

def DeviceConfigurationAddDevice(builder, device):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(device), 0)

def AddDevice(builder, device):
    DeviceConfigurationAddDevice(builder, device)

def DeviceConfigurationStartDeviceVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDeviceVector(builder, numElems):
    return DeviceConfigurationStartDeviceVector(builder, numElems)

def DeviceConfigurationEnd(builder):
    return builder.EndObject()

def End(builder):
    return DeviceConfigurationEnd(builder)

try:
    from typing import List
except:
    pass

class DeviceConfigurationT(object):

    # DeviceConfigurationT
    def __init__(self):
        self.name = None  # type: str
        self.numDevices = 0  # type: int
        self.device = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        deviceConfiguration = DeviceConfiguration()
        deviceConfiguration.Init(buf, pos)
        return cls.InitFromObj(deviceConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, deviceConfiguration):
        x = DeviceConfigurationT()
        x._UnPack(deviceConfiguration)
        return x

    # DeviceConfigurationT
    def _UnPack(self, deviceConfiguration):
        if deviceConfiguration is None:
            return
        self.name = deviceConfiguration.Name()
        self.numDevices = deviceConfiguration.NumDevices()
        if not deviceConfiguration.DeviceIsNone():
            self.device = []
            for i in range(deviceConfiguration.DeviceLength()):
                self.device.append(deviceConfiguration.Device(i))

    # DeviceConfigurationT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.device is not None:
            devicelist = []
            for i in range(len(self.device)):
                devicelist.append(builder.CreateString(self.device[i]))
            DeviceConfigurationStartDeviceVector(builder, len(self.device))
            for i in reversed(range(len(self.device))):
                builder.PrependUOffsetTRelative(devicelist[i])
            device = builder.EndVector()
        DeviceConfigurationStart(builder)
        if self.name is not None:
            DeviceConfigurationAddName(builder, name)
        DeviceConfigurationAddNumDevices(builder, self.numDevices)
        if self.device is not None:
            DeviceConfigurationAddDevice(builder, device)
        deviceConfiguration = DeviceConfigurationEnd(builder)
        return deviceConfiguration
