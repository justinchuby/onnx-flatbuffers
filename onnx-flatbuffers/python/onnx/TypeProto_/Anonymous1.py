# automatically generated by the FlatBuffers compiler, do not modify

# namespace: TypeProto_

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Anonymous1(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Anonymous1()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAnonymous1(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Anonymous1
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Anonymous1
    def TensorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.TypeProto_.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous1
    def SequenceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.TypeProto_.Sequence import Sequence
            obj = Sequence()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous1
    def MapType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.TypeProto_.Map import Map
            obj = Map()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous1
    def OptionalType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.TypeProto_.Optional import Optional
            obj = Optional()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Anonymous1
    def SparseTensorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.TypeProto_.SparseTensor import SparseTensor
            obj = SparseTensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def Anonymous1Start(builder):
    builder.StartObject(5)

def Start(builder):
    Anonymous1Start(builder)

def Anonymous1AddTensorType(builder, tensorType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tensorType), 0)

def AddTensorType(builder, tensorType):
    Anonymous1AddTensorType(builder, tensorType)

def Anonymous1AddSequenceType(builder, sequenceType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sequenceType), 0)

def AddSequenceType(builder, sequenceType):
    Anonymous1AddSequenceType(builder, sequenceType)

def Anonymous1AddMapType(builder, mapType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mapType), 0)

def AddMapType(builder, mapType):
    Anonymous1AddMapType(builder, mapType)

def Anonymous1AddOptionalType(builder, optionalType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(optionalType), 0)

def AddOptionalType(builder, optionalType):
    Anonymous1AddOptionalType(builder, optionalType)

def Anonymous1AddSparseTensorType(builder, sparseTensorType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(sparseTensorType), 0)

def AddSparseTensorType(builder, sparseTensorType):
    Anonymous1AddSparseTensorType(builder, sparseTensorType)

def Anonymous1End(builder):
    return builder.EndObject()

def End(builder):
    return Anonymous1End(builder)
