# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Tensor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Tensor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTensor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Tensor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Tensor
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tensor
    def DocString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Tensor
    def Dims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Tensor
    def DimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # Tensor
    def DimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Tensor
    def DimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Tensor
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Tensor
    def RawData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Tensor
    def RawDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Tensor
    def RawDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Tensor
    def RawDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Tensor
    def StringData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Tensor
    def StringDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Tensor
    def StringDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Tensor
    def ExternalData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.StringStringEntry import StringStringEntry
            obj = StringStringEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Tensor
    def ExternalDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Tensor
    def ExternalDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Tensor
    def DataLocation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Tensor
    def MetadataProps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.StringStringEntry import StringStringEntry
            obj = StringStringEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Tensor
    def MetadataPropsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Tensor
    def MetadataPropsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def TensorStart(builder):
    builder.StartObject(9)

def Start(builder):
    TensorStart(builder)

def TensorAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    TensorAddName(builder, name)

def TensorAddDocString(builder, docString):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(docString), 0)

def AddDocString(builder, docString):
    TensorAddDocString(builder, docString)

def TensorAddDims(builder, dims):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dims), 0)

def AddDims(builder, dims):
    TensorAddDims(builder, dims)

def TensorStartDimsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartDimsVector(builder, numElems):
    return TensorStartDimsVector(builder, numElems)

def TensorAddDataType(builder, dataType):
    builder.PrependInt32Slot(3, dataType, 0)

def AddDataType(builder, dataType):
    TensorAddDataType(builder, dataType)

def TensorAddRawData(builder, rawData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rawData), 0)

def AddRawData(builder, rawData):
    TensorAddRawData(builder, rawData)

def TensorStartRawDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartRawDataVector(builder, numElems):
    return TensorStartRawDataVector(builder, numElems)

def TensorAddStringData(builder, stringData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stringData), 0)

def AddStringData(builder, stringData):
    TensorAddStringData(builder, stringData)

def TensorStartStringDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartStringDataVector(builder, numElems):
    return TensorStartStringDataVector(builder, numElems)

def TensorAddExternalData(builder, externalData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(externalData), 0)

def AddExternalData(builder, externalData):
    TensorAddExternalData(builder, externalData)

def TensorStartExternalDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExternalDataVector(builder, numElems):
    return TensorStartExternalDataVector(builder, numElems)

def TensorAddDataLocation(builder, dataLocation):
    builder.PrependUint8Slot(7, dataLocation, 0)

def AddDataLocation(builder, dataLocation):
    TensorAddDataLocation(builder, dataLocation)

def TensorAddMetadataProps(builder, metadataProps):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(metadataProps), 0)

def AddMetadataProps(builder, metadataProps):
    TensorAddMetadataProps(builder, metadataProps)

def TensorStartMetadataPropsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetadataPropsVector(builder, numElems):
    return TensorStartMetadataPropsVector(builder, numElems)

def TensorEnd(builder):
    return builder.EndObject()

def End(builder):
    return TensorEnd(builder)

import onnx.StringStringEntry
try:
    from typing import List
except:
    pass

class TensorT(object):

    # TensorT
    def __init__(self):
        self.name = None  # type: str
        self.docString = None  # type: str
        self.dims = None  # type: List[int]
        self.dataType = 0  # type: int
        self.rawData = None  # type: List[int]
        self.stringData = None  # type: List[str]
        self.externalData = None  # type: List[onnx.StringStringEntry.StringStringEntryT]
        self.dataLocation = 0  # type: int
        self.metadataProps = None  # type: List[onnx.StringStringEntry.StringStringEntryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tensor = Tensor()
        tensor.Init(buf, pos)
        return cls.InitFromObj(tensor)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, tensor):
        x = TensorT()
        x._UnPack(tensor)
        return x

    # TensorT
    def _UnPack(self, tensor):
        if tensor is None:
            return
        self.name = tensor.Name()
        self.docString = tensor.DocString()
        if not tensor.DimsIsNone():
            if np is None:
                self.dims = []
                for i in range(tensor.DimsLength()):
                    self.dims.append(tensor.Dims(i))
            else:
                self.dims = tensor.DimsAsNumpy()
        self.dataType = tensor.DataType()
        if not tensor.RawDataIsNone():
            if np is None:
                self.rawData = []
                for i in range(tensor.RawDataLength()):
                    self.rawData.append(tensor.RawData(i))
            else:
                self.rawData = tensor.RawDataAsNumpy()
        if not tensor.StringDataIsNone():
            self.stringData = []
            for i in range(tensor.StringDataLength()):
                self.stringData.append(tensor.StringData(i))
        if not tensor.ExternalDataIsNone():
            self.externalData = []
            for i in range(tensor.ExternalDataLength()):
                if tensor.ExternalData(i) is None:
                    self.externalData.append(None)
                else:
                    stringStringEntry_ = onnx.StringStringEntry.StringStringEntryT.InitFromObj(tensor.ExternalData(i))
                    self.externalData.append(stringStringEntry_)
        self.dataLocation = tensor.DataLocation()
        if not tensor.MetadataPropsIsNone():
            self.metadataProps = []
            for i in range(tensor.MetadataPropsLength()):
                if tensor.MetadataProps(i) is None:
                    self.metadataProps.append(None)
                else:
                    stringStringEntry_ = onnx.StringStringEntry.StringStringEntryT.InitFromObj(tensor.MetadataProps(i))
                    self.metadataProps.append(stringStringEntry_)

    # TensorT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.docString is not None:
            docString = builder.CreateString(self.docString)
        if self.dims is not None:
            if np is not None and type(self.dims) is np.ndarray:
                dims = builder.CreateNumpyVector(self.dims)
            else:
                TensorStartDimsVector(builder, len(self.dims))
                for i in reversed(range(len(self.dims))):
                    builder.PrependInt64(self.dims[i])
                dims = builder.EndVector()
        if self.rawData is not None:
            if np is not None and type(self.rawData) is np.ndarray:
                rawData = builder.CreateNumpyVector(self.rawData)
            else:
                TensorStartRawDataVector(builder, len(self.rawData))
                for i in reversed(range(len(self.rawData))):
                    builder.PrependUint8(self.rawData[i])
                rawData = builder.EndVector()
        if self.stringData is not None:
            stringDatalist = []
            for i in range(len(self.stringData)):
                stringDatalist.append(builder.CreateString(self.stringData[i]))
            TensorStartStringDataVector(builder, len(self.stringData))
            for i in reversed(range(len(self.stringData))):
                builder.PrependUOffsetTRelative(stringDatalist[i])
            stringData = builder.EndVector()
        if self.externalData is not None:
            externalDatalist = []
            for i in range(len(self.externalData)):
                externalDatalist.append(self.externalData[i].Pack(builder))
            TensorStartExternalDataVector(builder, len(self.externalData))
            for i in reversed(range(len(self.externalData))):
                builder.PrependUOffsetTRelative(externalDatalist[i])
            externalData = builder.EndVector()
        if self.metadataProps is not None:
            metadataPropslist = []
            for i in range(len(self.metadataProps)):
                metadataPropslist.append(self.metadataProps[i].Pack(builder))
            TensorStartMetadataPropsVector(builder, len(self.metadataProps))
            for i in reversed(range(len(self.metadataProps))):
                builder.PrependUOffsetTRelative(metadataPropslist[i])
            metadataProps = builder.EndVector()
        TensorStart(builder)
        if self.name is not None:
            TensorAddName(builder, name)
        if self.docString is not None:
            TensorAddDocString(builder, docString)
        if self.dims is not None:
            TensorAddDims(builder, dims)
        TensorAddDataType(builder, self.dataType)
        if self.rawData is not None:
            TensorAddRawData(builder, rawData)
        if self.stringData is not None:
            TensorAddStringData(builder, stringData)
        if self.externalData is not None:
            TensorAddExternalData(builder, externalData)
        TensorAddDataLocation(builder, self.dataLocation)
        if self.metadataProps is not None:
            TensorAddMetadataProps(builder, metadataProps)
        tensor = TensorEnd(builder)
        return tensor
