# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TensorType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TensorType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTensorType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TensorType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TensorType
    def ElemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TensorType
    def Shape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.Shape import Shape
            obj = Shape()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TensorTypeStart(builder):
    builder.StartObject(2)

def Start(builder):
    TensorTypeStart(builder)

def TensorTypeAddElemType(builder, elemType):
    builder.PrependInt32Slot(0, elemType, 0)

def AddElemType(builder, elemType):
    TensorTypeAddElemType(builder, elemType)

def TensorTypeAddShape(builder, shape):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)

def AddShape(builder, shape):
    TensorTypeAddShape(builder, shape)

def TensorTypeEnd(builder):
    return builder.EndObject()

def End(builder):
    return TensorTypeEnd(builder)

import onnx.Shape
try:
    from typing import Optional
except:
    pass

class TensorTypeT(object):

    # TensorTypeT
    def __init__(self):
        self.elemType = 0  # type: int
        self.shape = None  # type: Optional[onnx.Shape.ShapeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tensorType = TensorType()
        tensorType.Init(buf, pos)
        return cls.InitFromObj(tensorType)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, tensorType):
        x = TensorTypeT()
        x._UnPack(tensorType)
        return x

    # TensorTypeT
    def _UnPack(self, tensorType):
        if tensorType is None:
            return
        self.elemType = tensorType.ElemType()
        if tensorType.Shape() is not None:
            self.shape = onnx.Shape.ShapeT.InitFromObj(tensorType.Shape())

    # TensorTypeT
    def Pack(self, builder):
        if self.shape is not None:
            shape = self.shape.Pack(builder)
        TensorTypeStart(builder)
        TensorTypeAddElemType(builder, self.elemType)
        if self.shape is not None:
            TensorTypeAddShape(builder, shape)
        tensorType = TensorTypeEnd(builder)
        return tensorType
