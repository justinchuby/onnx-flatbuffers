# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TensorSegment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TensorSegment()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTensorSegment(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TensorSegment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TensorSegment
    def Begin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TensorSegment
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TensorSegmentStart(builder):
    builder.StartObject(2)

def Start(builder):
    TensorSegmentStart(builder)

def TensorSegmentAddBegin(builder, begin):
    builder.PrependInt64Slot(0, begin, 0)

def AddBegin(builder, begin):
    TensorSegmentAddBegin(builder, begin)

def TensorSegmentAddEnd(builder, end):
    builder.PrependInt64Slot(1, end, 0)

def AddEnd(builder, end):
    TensorSegmentAddEnd(builder, end)

def TensorSegmentEnd(builder):
    return builder.EndObject()

def End(builder):
    return TensorSegmentEnd(builder)


class TensorSegmentT(object):

    # TensorSegmentT
    def __init__(self):
        self.begin = 0  # type: int
        self.end = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        tensorSegment = TensorSegment()
        tensorSegment.Init(buf, pos)
        return cls.InitFromObj(tensorSegment)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, tensorSegment):
        x = TensorSegmentT()
        x._UnPack(tensorSegment)
        return x

    # TensorSegmentT
    def _UnPack(self, tensorSegment):
        if tensorSegment is None:
            return
        self.begin = tensorSegment.Begin()
        self.end = tensorSegment.End()

    # TensorSegmentT
    def Pack(self, builder):
        TensorSegmentStart(builder)
        TensorSegmentAddBegin(builder, self.begin)
        TensorSegmentAddEnd(builder, self.end)
        tensorSegment = TensorSegmentEnd(builder)
        return tensorSegment
