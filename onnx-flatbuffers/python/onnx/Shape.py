# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Shape(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Shape()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsShape(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Shape
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Shape
    def Dim(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.Dimension import Dimension
            obj = Dimension()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Shape
    def DimLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Shape
    def DimIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ShapeStart(builder):
    builder.StartObject(1)

def Start(builder):
    ShapeStart(builder)

def ShapeAddDim(builder, dim):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dim), 0)

def AddDim(builder, dim):
    ShapeAddDim(builder, dim)

def ShapeStartDimVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDimVector(builder, numElems):
    return ShapeStartDimVector(builder, numElems)

def ShapeEnd(builder):
    return builder.EndObject()

def End(builder):
    return ShapeEnd(builder)

import onnx.Dimension
try:
    from typing import List
except:
    pass

class ShapeT(object):

    # ShapeT
    def __init__(self):
        self.dim = None  # type: List[onnx.Dimension.DimensionT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        shape = Shape()
        shape.Init(buf, pos)
        return cls.InitFromObj(shape)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, shape):
        x = ShapeT()
        x._UnPack(shape)
        return x

    # ShapeT
    def _UnPack(self, shape):
        if shape is None:
            return
        if not shape.DimIsNone():
            self.dim = []
            for i in range(shape.DimLength()):
                if shape.Dim(i) is None:
                    self.dim.append(None)
                else:
                    dimension_ = onnx.Dimension.DimensionT.InitFromObj(shape.Dim(i))
                    self.dim.append(dimension_)

    # ShapeT
    def Pack(self, builder):
        if self.dim is not None:
            dimlist = []
            for i in range(len(self.dim)):
                dimlist.append(self.dim[i].Pack(builder))
            ShapeStartDimVector(builder, len(self.dim))
            for i in reversed(range(len(self.dim))):
                builder.PrependUOffsetTRelative(dimlist[i])
            dim = builder.EndVector()
        ShapeStart(builder)
        if self.dim is not None:
            ShapeAddDim(builder, dim)
        shape = ShapeEnd(builder)
        return shape
