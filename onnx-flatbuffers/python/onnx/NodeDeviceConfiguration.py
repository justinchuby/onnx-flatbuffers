# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NodeDeviceConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeDeviceConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeDeviceConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeDeviceConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeDeviceConfiguration
    def ConfigurationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeDeviceConfiguration
    def ShardingSpec(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.ShardingSpec import ShardingSpec
            obj = ShardingSpec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeDeviceConfiguration
    def ShardingSpecLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeDeviceConfiguration
    def ShardingSpecIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # NodeDeviceConfiguration
    def PipelineStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NodeDeviceConfigurationStart(builder):
    builder.StartObject(3)

def Start(builder):
    NodeDeviceConfigurationStart(builder)

def NodeDeviceConfigurationAddConfigurationId(builder, configurationId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(configurationId), 0)

def AddConfigurationId(builder, configurationId):
    NodeDeviceConfigurationAddConfigurationId(builder, configurationId)

def NodeDeviceConfigurationAddShardingSpec(builder, shardingSpec):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shardingSpec), 0)

def AddShardingSpec(builder, shardingSpec):
    NodeDeviceConfigurationAddShardingSpec(builder, shardingSpec)

def NodeDeviceConfigurationStartShardingSpecVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShardingSpecVector(builder, numElems):
    return NodeDeviceConfigurationStartShardingSpecVector(builder, numElems)

def NodeDeviceConfigurationAddPipelineStage(builder, pipelineStage):
    builder.PrependInt32Slot(2, pipelineStage, 0)

def AddPipelineStage(builder, pipelineStage):
    NodeDeviceConfigurationAddPipelineStage(builder, pipelineStage)

def NodeDeviceConfigurationEnd(builder):
    return builder.EndObject()

def End(builder):
    return NodeDeviceConfigurationEnd(builder)
