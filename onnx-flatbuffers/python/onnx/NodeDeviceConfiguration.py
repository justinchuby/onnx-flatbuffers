# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NodeDeviceConfiguration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeDeviceConfiguration()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNodeDeviceConfiguration(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NodeDeviceConfiguration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeDeviceConfiguration
    def ConfigurationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeDeviceConfiguration
    def ShardingSpec(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.ShardingSpec import ShardingSpec
            obj = ShardingSpec()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeDeviceConfiguration
    def ShardingSpecLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeDeviceConfiguration
    def ShardingSpecIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # NodeDeviceConfiguration
    def PipelineStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def NodeDeviceConfigurationStart(builder):
    builder.StartObject(3)

def Start(builder):
    NodeDeviceConfigurationStart(builder)

def NodeDeviceConfigurationAddConfigurationId(builder, configurationId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(configurationId), 0)

def AddConfigurationId(builder, configurationId):
    NodeDeviceConfigurationAddConfigurationId(builder, configurationId)

def NodeDeviceConfigurationAddShardingSpec(builder, shardingSpec):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shardingSpec), 0)

def AddShardingSpec(builder, shardingSpec):
    NodeDeviceConfigurationAddShardingSpec(builder, shardingSpec)

def NodeDeviceConfigurationStartShardingSpecVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShardingSpecVector(builder, numElems):
    return NodeDeviceConfigurationStartShardingSpecVector(builder, numElems)

def NodeDeviceConfigurationAddPipelineStage(builder, pipelineStage):
    builder.PrependInt32Slot(2, pipelineStage, 0)

def AddPipelineStage(builder, pipelineStage):
    NodeDeviceConfigurationAddPipelineStage(builder, pipelineStage)

def NodeDeviceConfigurationEnd(builder):
    return builder.EndObject()

def End(builder):
    return NodeDeviceConfigurationEnd(builder)

import onnx.ShardingSpec
try:
    from typing import List
except:
    pass

class NodeDeviceConfigurationT(object):

    # NodeDeviceConfigurationT
    def __init__(self):
        self.configurationId = None  # type: str
        self.shardingSpec = None  # type: List[onnx.ShardingSpec.ShardingSpecT]
        self.pipelineStage = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        nodeDeviceConfiguration = NodeDeviceConfiguration()
        nodeDeviceConfiguration.Init(buf, pos)
        return cls.InitFromObj(nodeDeviceConfiguration)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, nodeDeviceConfiguration):
        x = NodeDeviceConfigurationT()
        x._UnPack(nodeDeviceConfiguration)
        return x

    # NodeDeviceConfigurationT
    def _UnPack(self, nodeDeviceConfiguration):
        if nodeDeviceConfiguration is None:
            return
        self.configurationId = nodeDeviceConfiguration.ConfigurationId()
        if not nodeDeviceConfiguration.ShardingSpecIsNone():
            self.shardingSpec = []
            for i in range(nodeDeviceConfiguration.ShardingSpecLength()):
                if nodeDeviceConfiguration.ShardingSpec(i) is None:
                    self.shardingSpec.append(None)
                else:
                    shardingSpec_ = onnx.ShardingSpec.ShardingSpecT.InitFromObj(nodeDeviceConfiguration.ShardingSpec(i))
                    self.shardingSpec.append(shardingSpec_)
        self.pipelineStage = nodeDeviceConfiguration.PipelineStage()

    # NodeDeviceConfigurationT
    def Pack(self, builder):
        if self.configurationId is not None:
            configurationId = builder.CreateString(self.configurationId)
        if self.shardingSpec is not None:
            shardingSpeclist = []
            for i in range(len(self.shardingSpec)):
                shardingSpeclist.append(self.shardingSpec[i].Pack(builder))
            NodeDeviceConfigurationStartShardingSpecVector(builder, len(self.shardingSpec))
            for i in reversed(range(len(self.shardingSpec))):
                builder.PrependUOffsetTRelative(shardingSpeclist[i])
            shardingSpec = builder.EndVector()
        NodeDeviceConfigurationStart(builder)
        if self.configurationId is not None:
            NodeDeviceConfigurationAddConfigurationId(builder, configurationId)
        if self.shardingSpec is not None:
            NodeDeviceConfigurationAddShardingSpec(builder, shardingSpec)
        NodeDeviceConfigurationAddPipelineStage(builder, self.pipelineStage)
        nodeDeviceConfiguration = NodeDeviceConfigurationEnd(builder)
        return nodeDeviceConfiguration
