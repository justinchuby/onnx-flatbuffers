# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StringStringEntryProto(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StringStringEntryProto()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStringStringEntryProto(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StringStringEntryProto
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StringStringEntryProto
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StringStringEntryProto
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def StringStringEntryProtoStart(builder):
    builder.StartObject(2)

def Start(builder):
    StringStringEntryProtoStart(builder)

def StringStringEntryProtoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    StringStringEntryProtoAddKey(builder, key)

def StringStringEntryProtoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    StringStringEntryProtoAddValue(builder, value)

def StringStringEntryProtoEnd(builder):
    return builder.EndObject()

def End(builder):
    return StringStringEntryProtoEnd(builder)


class StringStringEntryProtoT(object):

    # StringStringEntryProtoT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stringStringEntryProto = StringStringEntryProto()
        stringStringEntryProto.Init(buf, pos)
        return cls.InitFromObj(stringStringEntryProto)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stringStringEntryProto):
        x = StringStringEntryProtoT()
        x._UnPack(stringStringEntryProto)
        return x

    # StringStringEntryProtoT
    def _UnPack(self, stringStringEntryProto):
        if stringStringEntryProto is None:
            return
        self.key = stringStringEntryProto.Key()
        self.value = stringStringEntryProto.Value()

    # StringStringEntryProtoT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = builder.CreateString(self.value)
        StringStringEntryProtoStart(builder)
        if self.key is not None:
            StringStringEntryProtoAddKey(builder, key)
        if self.value is not None:
            StringStringEntryProtoAddValue(builder, value)
        stringStringEntryProto = StringStringEntryProtoEnd(builder)
        return stringStringEntryProto
