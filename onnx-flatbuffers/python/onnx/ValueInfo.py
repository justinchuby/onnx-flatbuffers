# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ValueInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ValueInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsValueInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ValueInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ValueInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ValueInfo
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from onnx.TypeInfo import TypeInfo
            obj = TypeInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ValueInfo
    def DocString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ValueInfo
    def MetadataProps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from onnx.StringStringEntry import StringStringEntry
            obj = StringStringEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ValueInfo
    def MetadataPropsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ValueInfo
    def MetadataPropsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def ValueInfoStart(builder):
    builder.StartObject(4)

def Start(builder):
    ValueInfoStart(builder)

def ValueInfoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ValueInfoAddName(builder, name)

def ValueInfoAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    ValueInfoAddType(builder, type)

def ValueInfoAddDocString(builder, docString):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(docString), 0)

def AddDocString(builder, docString):
    ValueInfoAddDocString(builder, docString)

def ValueInfoAddMetadataProps(builder, metadataProps):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(metadataProps), 0)

def AddMetadataProps(builder, metadataProps):
    ValueInfoAddMetadataProps(builder, metadataProps)

def ValueInfoStartMetadataPropsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetadataPropsVector(builder, numElems):
    return ValueInfoStartMetadataPropsVector(builder, numElems)

def ValueInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return ValueInfoEnd(builder)

import onnx.StringStringEntry
import onnx.TypeInfo
try:
    from typing import List, Optional
except:
    pass

class ValueInfoT(object):

    # ValueInfoT
    def __init__(self):
        self.name = None  # type: str
        self.type = None  # type: Optional[onnx.TypeInfo.TypeInfoT]
        self.docString = None  # type: str
        self.metadataProps = None  # type: List[onnx.StringStringEntry.StringStringEntryT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        valueInfo = ValueInfo()
        valueInfo.Init(buf, pos)
        return cls.InitFromObj(valueInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, valueInfo):
        x = ValueInfoT()
        x._UnPack(valueInfo)
        return x

    # ValueInfoT
    def _UnPack(self, valueInfo):
        if valueInfo is None:
            return
        self.name = valueInfo.Name()
        if valueInfo.Type() is not None:
            self.type = onnx.TypeInfo.TypeInfoT.InitFromObj(valueInfo.Type())
        self.docString = valueInfo.DocString()
        if not valueInfo.MetadataPropsIsNone():
            self.metadataProps = []
            for i in range(valueInfo.MetadataPropsLength()):
                if valueInfo.MetadataProps(i) is None:
                    self.metadataProps.append(None)
                else:
                    stringStringEntry_ = onnx.StringStringEntry.StringStringEntryT.InitFromObj(valueInfo.MetadataProps(i))
                    self.metadataProps.append(stringStringEntry_)

    # ValueInfoT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = self.type.Pack(builder)
        if self.docString is not None:
            docString = builder.CreateString(self.docString)
        if self.metadataProps is not None:
            metadataPropslist = []
            for i in range(len(self.metadataProps)):
                metadataPropslist.append(self.metadataProps[i].Pack(builder))
            ValueInfoStartMetadataPropsVector(builder, len(self.metadataProps))
            for i in reversed(range(len(self.metadataProps))):
                builder.PrependUOffsetTRelative(metadataPropslist[i])
            metadataProps = builder.EndVector()
        ValueInfoStart(builder)
        if self.name is not None:
            ValueInfoAddName(builder, name)
        if self.type is not None:
            ValueInfoAddType(builder, type)
        if self.docString is not None:
            ValueInfoAddDocString(builder, docString)
        if self.metadataProps is not None:
            ValueInfoAddMetadataProps(builder, metadataProps)
        valueInfo = ValueInfoEnd(builder)
        return valueInfo
