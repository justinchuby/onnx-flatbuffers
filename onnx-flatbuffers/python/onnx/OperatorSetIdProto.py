# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OperatorSetIdProto(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OperatorSetIdProto()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOperatorSetIdProto(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OperatorSetIdProto
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OperatorSetIdProto
    def Domain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OperatorSetIdProto
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def OperatorSetIdProtoStart(builder):
    builder.StartObject(2)

def Start(builder):
    OperatorSetIdProtoStart(builder)

def OperatorSetIdProtoAddDomain(builder, domain):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(domain), 0)

def AddDomain(builder, domain):
    OperatorSetIdProtoAddDomain(builder, domain)

def OperatorSetIdProtoAddVersion(builder, version):
    builder.PrependInt64Slot(1, version, 0)

def AddVersion(builder, version):
    OperatorSetIdProtoAddVersion(builder, version)

def OperatorSetIdProtoEnd(builder):
    return builder.EndObject()

def End(builder):
    return OperatorSetIdProtoEnd(builder)
