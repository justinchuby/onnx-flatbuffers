# automatically generated by the FlatBuffers compiler, do not modify

# namespace: onnx

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TypeInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TypeInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTypeInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TypeInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TypeInfo
    def ValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TypeInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # TypeInfo
    def Denotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TypeInfoStart(builder):
    builder.StartObject(3)

def Start(builder):
    TypeInfoStart(builder)

def TypeInfoAddValueType(builder, valueType):
    builder.PrependUint8Slot(0, valueType, 0)

def AddValueType(builder, valueType):
    TypeInfoAddValueType(builder, valueType)

def TypeInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    TypeInfoAddValue(builder, value)

def TypeInfoAddDenotation(builder, denotation):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(denotation), 0)

def AddDenotation(builder, denotation):
    TypeInfoAddDenotation(builder, denotation)

def TypeInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return TypeInfoEnd(builder)

import onnx.MapType
import onnx.OptionalType
import onnx.SequenceType
import onnx.SparseTensorType
import onnx.TensorType
import onnx.ValueType
try:
    from typing import Union
except:
    pass

class TypeInfoT(object):

    # TypeInfoT
    def __init__(self):
        self.valueType = 0  # type: int
        self.value = None  # type: Union[None, onnx.TensorType.TensorTypeT, onnx.SequenceType.SequenceTypeT, onnx.MapType.MapTypeT, onnx.OptionalType.OptionalTypeT, onnx.SparseTensorType.SparseTensorTypeT]
        self.denotation = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        typeInfo = TypeInfo()
        typeInfo.Init(buf, pos)
        return cls.InitFromObj(typeInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, typeInfo):
        x = TypeInfoT()
        x._UnPack(typeInfo)
        return x

    # TypeInfoT
    def _UnPack(self, typeInfo):
        if typeInfo is None:
            return
        self.valueType = typeInfo.ValueType()
        self.value = onnx.ValueType.ValueTypeCreator(self.valueType, typeInfo.Value())
        self.denotation = typeInfo.Denotation()

    # TypeInfoT
    def Pack(self, builder):
        if self.value is not None:
            value = self.value.Pack(builder)
        if self.denotation is not None:
            denotation = builder.CreateString(self.denotation)
        TypeInfoStart(builder)
        TypeInfoAddValueType(builder, self.valueType)
        if self.value is not None:
            TypeInfoAddValue(builder, value)
        if self.denotation is not None:
            TypeInfoAddDenotation(builder, denotation)
        typeInfo = TypeInfoEnd(builder)
        return typeInfo
